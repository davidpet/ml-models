I. Variables
  A.  Interning
  B.  Data Types
  C.  Signed vs. Unsigned Numbers
  D.  Different Integer Type Sizes
  E.  Different Floating Point Type Sizes
  F.  Float Equality (approximate)
  G.  Constants/Final Variables
  H.  Statics
  I.  Enums (inc. most basic/minimal, numeric, string, and strongly-typed)
  J.  Nullability
  K.  NaN, Infinity, etc.
  L.  References and Mutability
  M.  Type Inference
  N.  Equality (all ways)
  O.  Casting & Coercion
  P.  Type Alias
  Q.  Type Union
  R.  Variable Lifetime inc. Caveats
  S.  Scope and Visibility
  T.  Local, Instance, and Class Variables
  U.  Pointers, References, Smart Pointers, Memory Management
  V.  Garbage Collection, Memory Leaks
  W.  Move, Copy, and Clone Semantics
  X.  Uninitialized/Default Values (inc. local, global, instance, and static contexts)
  Y.  Getting Characteristics Such as Max and Min Value of Data Type
  Z.  Delayed Initialization of Locals (constants vs. variables)
  AA. Delayed Iniitialization of Instance Members (constants vs. variables)
  AB. Declaring Multiple Variables in One Line

II. Operators
  A.  All Math & Logic Operators
  B.  Save Navigation
  C.  Coalescing
  D.  Comparison
  E.  Assignment
  F.  String Concatenation
  G.  Reflection
  H.  Bitwise
  I.  Boolean Operators on Non-Boolean Values
  J.  Operator Precedence
  K.  Collection Operators
  L.  String Operators
  M.  Runtime Type/Type Equality/Type Comparison

III. Strings and Printing
  A.  All Ways to Quote Strings
  B.  Character Types and Quoting
  C.  Formatted and Template Strings
  D.  String Methods
  E.  String Concatenation
  F.  Conversions To/From String
  G.  Encodings
  H.  Printing
  I.  Logging
  J.  Regular Expressions
  K.  Serialization
  L.  StringBuilder/StringBuffer/etc.
  M.  Index Operator and Slicing
  N.  Converting Collections to String
  O.  Interop Between Characters and Numbers
  P.  Comments (block, line, etc.)
  Q.  String Splitting
  R.  Sorting
  S.  Line Endings (In Literals and Relative to System)

IV. Control Flow
  A.  if/then statements
  B.  if/then/else statements
  C.  switch statements
  D.  Switch Statements on Non-Integer Types (string, enum, custom)
  E.  for loops
  F.  while loops
  G.  do-while loops
  H.  break and continue
  I.  try/catch/finally and throwing exceptions
  J.  emptiness checks
  K.  context management
  L.  Context Management with Multiple Resources at Once
  M.  asserts
  N.  when braces are required vs. optional
  O.  Generator/Lazy List
  P.  Arguments to main() function
  Q.  Truthiness of Different Data Types in Boolean Conditions
  R.  Actual Value Returned by Short-Circuiting
  S.  Use of final or constant variable in loop headers

V. Functions
  A.  Basic Syntax
  B.  Positional Arguments
  C.  Named Arguments
  D.  Optional/Default Arguments
  E.  Variadic Functions
  F.  Overloading
  G.  Lambdas
  H.  Nested Functions
  I.  Spread Operator
  J.  Return Type Inference
  K.  Higher-Order Functions
  L.  Inline Functions
  M.  Macros
  N.  Extension Methods
  O.  Specifying Exceptions Thrown by Function
  P.  Recursion
  Q.  Trailing Commas Allowed in Functions and Literals?
  R.  Passing by Reference (modifying a nonlocal variable passed to a function)
  S.  Const/final Arguments
  T.  Uniqueness of Method Signature (param names?  param types? overloads?)

VI. Functional Programming
  A.  Lambdas
  B.  Closures (ref vs. value)
  C.  Ignored Parameters
  D.  Partial Application
  E.  Bound vs. Unbound (eg. 'this')
  F.  Declaration of Variable Holding Function
  G.  map, reduce, and filter
  H.  Return Object from Lambda
  I.  Range
  J.  Functional zip() method on 2 streams
  K.  IIFE

VII. Classes
  A.  Basic Syntax and Instantiation (inc. static, instance, class members, etc.)
  B.  Static Classes
  C.  Static Constructor
  D.  Access Modifiers
  E.  Inheritance
  F.  Interfaces and Abstract Base Classes
  G.  Multiple Inheritance
  H.  Polymorphism
  I.  Nullability of Class Members
  J.  Initializing Instance Values in Class Declarations
  K.  Constructors, Initialization Lists
  L.  Base and Delegating Constructors
  M.  Constructors Included by Default
  N.  Calling Base Class Method from Derived Class Method
  O.  this/self Keyword
  P.  Name Hiding
  Q.  Construction Order
  R.  Nested Classes
  S.  Dynamic Types
  T.  Operator Overloading
  U.  Indexers
  V.  Copying/Cloning
  W.  Boxing/Unboxing
  X.  Root Class of Type System (and methods to override)
  Y.  Useful Built-in Interfaces and Abstract Base Classes
  Z.  Importance of Declaration Order/Forward Declarations
  AA.  Structural typing
  AB.  Partial Classes
  AC.  Reference Type vs. Value Type
  AD.  Properties (manual and auto-implemented)
  AE.  Return Type Inference
  AF.  Destructors/Finalizers/Disposable Pattern
  AG.  Callable Object/Call Operator
  AH.  Anonymous Class
  AI.  Static and Default Methods in Interfaces
  AJ.  Interface Member Visibility (default and modifiers)
  AK.  Interface Members Other Than Public Abstract Methods
  AL.  Sealed/Final Methods
  AM.  Sealed/Final Classes
  AN.  Caveats for Subclass Constructors (eg. when to call base, construction order, etc.)
  AO.  Instances Accessing Each Others' Private Members
  AP.  Friend Classes
  AQ.  Method Name Collisions in Interfaces Implemented by Class
  AR.  Partial Interface Implementation
  AS.  Covariant Return Types
  AT.  Inheritance and Name Hiding of Static Members
  AU.  Hashing Members Together

VIII. Generics/Templates
  A.  Generic Function
  B.  Explicitly Calling Generic Function with Type
  B.  Generic Class
  B.  Explicitly Creating Generic Class with Type
  C.  Generic Lambda
  D.  Important Built-in Generic Classes/Interfaces
  E.  Void as T argument
  F.  Metaprogramming
  G.  Type Erasure/Runtime Type/Raw Types in Code
  H.  Type Constraints
  I.  Type Wildcards
  J.  Overloading Generic by Number of Type Parameters
  K.  Covariance/Contravariance
  L.  Custom Comparators for Elements
  M.  Built-in Comparators for Elements
  N.  Curiously Recurring Template Pattern (CRTP)

IX. Modules/Packages/Imports
  A.  Importing Built-In Libraries
  B.  Declaring Importable Module/Package
  C.  Importing Custom Module/Package by Relative path from Subfolder
  D.  Other Package Management Options
  E.  Renaming Imported Symbols
  F.  Wrapping Multiple Imported Symbols
  G.  Exporting and Access levels
  H.  Multiple Imports on One Line
  I.  Barrelling
  J.  Statefulness of Imported Packages
  K.  Namespaces
  L.  Ambient Declarations
  M.  Search Path
  N.  Importing Constants and Variables
  O.  Default Imports in Every Program
  P.  Multiple Top-Level Classes in Same File
  Q.  Top-Level Classes Referring to Each Other Mutually
  R.  Top-Level Functions (not in classes)
  S.  Top-Level Variables/Constants (not in classes)
  T.  Top-Level Enums (not in classes)
  U.  Fully-Qualified Symbol Usages Without Importing First
  V.  Dealing With Symbol Name Conflicts

X. Docstrings
  A.  Functions
  B.  Classes
  C.  Variables
  D.  Package/File

XI. Decorators
  A.  Function Decorators
  B.  Class Decorators
  C.  Useful Built-In Decorators

XII. Collections
  A.  Array
  B.  List
  C.  Vector
  D.  Dictionary/Map
  E.  Set
  F.  String Builder
  G.  Tuple
  H.  Struct
  I.  Immutable Types
  J.  String as Collection
  K.  Generic Sequence/Iterable Type
  L.  Aggregate functions (max, min, etc.)
  M.  Iterating Keys vs. Values
  N.  Zipping
  O.  Slicing
  P.  Sorting
  Q.  Stack, Queue, Deque
  R.  Collection Literals and Inline Initialization/Passing
  S.  Builder Pattern
  T.  Index Operator
  U.  Conversions Between Collection Types
  V.  Ordered vs. Unordered Maps/Dictionaries
  W.  Sorting (Default vs. Custom Comparator)
  X.  Casting Between More and Less Specific Element Types in Collection References
  Y.  Copying/Cloning
  Z.  Uniformly Initializing Elements (eg. to default or non-default values based on type)
  AA. Shuffling
  AB. Priority Queue, Minheap, Maxheap
  AC. Skipping Items in Array Initializer?
  AD. Sorted Versions of Collection Types
  AE. Bitfields
  AF. Thread Safety of Built-in Data Types and Collections
  AG. Thread-Safe Alternatives to Built-in Types and Collections
  AH. Searching

XIII. Standard library
  A.  Console I/O
  B.  Idiomatic User Input (Lines and Chunks)
  C.  Math
  D.  File I/O
  E.  Threading/async/await/lock/promise/mutex
  F.  HTTP
  G.  Paths and Environment Variables
  H.  Events
  I.  Observables/Reactive Programming
  J.  Time and Dates
  K.  Random Numbers

XIV. Testing (JUnit-style)
  A.  Test Class/Suite and Methods
  B.  Setup and Teardown
  C.  Persistence of Class/Suite Data Between Tests
  D.  Asserts
  E.  Mocking
  F.  Faking
  G.  Screendiffs
