; OM File Header - Saved 2023/01/19 21:56:07
; (7.01 :patc (om-make-point 712 10) (om-make-point 410 376) (om-make-point 567 487) "" 183 0 "2023/01/19 20:55:18" "2023/01/19 21:27:53")
; End File Header
; External resources 
; (list (list (quote :abstraction) "#P\"pick-from-weighted-range.omp\""))
(in-package :om)(load-lib-for (quote nil))(setf *om-current-persistent* (om-load-patch1 "random-weighted-value" (quote ((let ((box (om-load-boxout "output" 0 (om-make-point 381 423) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) "chosen" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "NTH" (quote nth) (quote ((om-load-inputfun (quote input-funbox) "ORIG-N" "ORIG-N" nil) (om-load-inputfun (quote input-funbox) "ORIG-LIST" "ORIG-LIST" nil))) (om-make-point 216 438) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 92 39) (quote "index number$") nil (om-make-point 335 372) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote patch-box) "pick-from-weighted-range" (quote ("elements" "misc" "pick-from-weighted-range")) (quote ((om-load-inputfun (quote input-funbox) "list of relative proportions" "proportions" (list 1 2 1 2)) (om-load-inputfun (quote input-funbox) "value within the linear range (0 to sum of proportions minus 1)" "linearvalue" 5))) (om-make-point 190 351) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 114 26) (quote "random i in range") nil (om-make-point 434 273) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "1-" (quote 1-) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil))) (om-make-point 448 200) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM-RANDOM" (quote om-random) (quote ((om-load-inputfun (quote input-funbox) "min" "LOW" 0) (om-load-inputfun (quote input-funbox) "max" "HIGH" 1))) (om-make-point 367 261) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 102 26) (quote "total proportion") nil (om-make-point 424 167) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 357 106) (om-make-point 28 28) (quote +) "+" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "APPLY" (quote apply) (quote ((om-load-inputfun (quote input-funbox) "FUNCTION" "FUNCTION" nil) (om-load-inputfun (quote input-funbox) "ARG" "ARG" nil))) (om-make-point 393 143) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "proportions" 1 (om-make-point 370 34) "list of relative proportions of values (n/total = probability)" "proportions" (list 1 1 1 1 1 1) nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "values" 0 (om-make-point 84 41) "list of possible values" "values" (list 1 2 3 4 5 6) nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((1 0 0 0 nil 0) (3 0 1 0 nil 0) (11 0 1 1 ((om-make-point 102 97) (om-make-point 102 268) (om-make-point 75 347) (om-make-point 234 438)) 0) (10 0 3 0 ((om-make-point 400 90) (om-make-point 235 97) (om-make-point 236 220) (om-make-point 236 351)) 0) (6 0 3 1 nil 0) (9 0 5 0 nil 0) (5 0 6 1 nil 0) (8 0 9 0 nil 0) (10 0 9 1 nil 0))) nil 7.01))
