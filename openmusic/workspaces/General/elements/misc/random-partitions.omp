; OM File Header - Saved 2023/01/17 02:10:55
; (7.01 :patc (om-make-point 334 10) (om-make-point 658 241) (om-make-point 1056 353) "" 183 0 "2023/01/13 14:55:50" "2023/01/13 18:50:55")
; End File Header
; External resources 
; (list (list (quote :abstraction) "#P\"C:coalesce.omp\""))
(in-package :om)(load-lib-for (quote nil))(setf *om-current-persistent* (om-load-patch1 "random-partitions" (quote ((let ((box (om-load-boxcall (quote patch-box) "coalesce" (quote ("elements" "misc" "coalesce")) (quote ((om-load-inputfun (quote input-funbox) "" "value" nil) (om-load-inputfun (quote input-funbox) "" "default" nil))) (om-make-point 422 547) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 604 564) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 471 541) (om-make-point 35 28) (list 0) "(0)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM+" (quote om+) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 190 318) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "REMOVE-DUPLICATES" (quote remove-duplicates) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 299 537) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "greaterp" (om-load-patch-abs1 "greaterp" (quote ((let ((box (om-load-boxcall (quote lispfun) ">" (quote >) (quote ((om-load-inputfun (quote input-funbox) "NUM" "NUM" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 87 120) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 99 191) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) "p" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "upperval" 1 (om-make-point 146 44) "" "upperval" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "testval" 0 (om-make-point 5 45) "" "testval" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((3 0 0 0 nil 0) (2 0 0 1 nil 0) (0 0 1 0 nil 0))) 7.01 nil "" (om-make-point 961 440) (om-make-point 400 480)) (quote ((om-load-inputfun (quote input-funbox) "" "testval" nil) (om-load-inputfun (quote input-funbox) "" "upperval" nil))) (om-make-point 45 259) nil (list nil) "l" "greaterp"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "REMOVE-IF" (quote remove-if) (quote ((om-load-inputfun (quote input-funbox) "PREDICATE" "PREDICATE" nil) (om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 314 480) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM-" (quote om-) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 94 119) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "add-next" (om-load-patch-abs1 "add-next" (quote ((let ((box (om-load-boxcall (quote lispfun) "LISTP 2" (quote listp) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil))) (om-make-point 50 421) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OMIF 2" (quote omif) (quote ((om-load-inputfun (quote input-funbox) "IF" "TEST" nil) (om-load-inputfun (quote input-funbox) "THEN" "ACTION" nil) (om-load-inputfun (quote input-funbox) "ELSE" "ELSE" nil))) (om-make-point 69 499) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "FIRST" (quote first) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 140 217) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 322 489) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) "choices" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "APPEND" (quote append) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 170 538) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LIST" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 182 459) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM-RANDOM" (quote om-random) (quote ((om-load-inputfun (quote input-funbox) "min" "LOW" 0) (om-load-inputfun (quote input-funbox) "max" "HIGH" 1))) (om-make-point 162 372) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 73 300) (om-make-point 26 28) 1 "1" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM+" (quote om+) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 42 324) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 70 220) (om-make-point 31 28) -1 "-1" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LAST" (quote last) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 129 151) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OMIF" (quote omif) (quote ((om-load-inputfun (quote input-funbox) "IF" "TEST" nil) (om-load-inputfun (quote input-funbox) "THEN" "ACTION" nil) (om-load-inputfun (quote input-funbox) "ELSE" "ELSE" nil))) (om-make-point 35 251) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LISTP" (quote listp) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil))) (om-make-point 46 179) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "upper" 2 (om-make-point 228 34) "" "upper" 10 nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "ignored" 1 (om-make-point 55 45) "" "ignored" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "choices" 0 (om-make-point 4 45) "" "choices" (list 0 1 2) nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((15 0 0 0 ((om-make-point 24 101) (om-make-point 24 261) (om-make-point 10 436) (om-make-point 64 421)) 0) (0 0 1 0 nil 0) (15 0 1 1 ((om-make-point 24 101) (om-make-point 24 300) (om-make-point 91 479) (om-make-point 85 499)) 0) (10 0 2 0 nil 0) (4 0 3 0 nil 0) (1 0 4 0 nil 0) (5 0 4 1 nil 0) (6 0 5 0 nil 0) (8 0 6 0 nil 0) (13 0 6 1 nil 0) (11 0 8 0 nil 0) (7 0 8 1 nil 0) (15 0 10 0 nil 0) (12 0 11 0 nil 0) (2 0 11 1 nil 0) (9 0 11 2 nil 0) (15 0 12 0 nil 0))) 7.01 nil "" (om-make-point 1130 458) (om-make-point 446 450)) (quote ((om-load-inputfun (quote input-funbox) "" "choices" nil) (om-load-inputfun (quote input-funbox) "" "ignored" nil) (om-load-inputfun (quote input-funbox) "" "upper" nil))) (om-make-point 102 173) nil (list nil) "l" "add-next"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 255 132) (om-make-point 26 28) 0 "0" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "ARITHM-SER" (quote arithm-ser) (quote ((om-load-inputfun (quote input-funbox) "begin" "BEGIN" 0) (om-load-inputfun (quote input-funbox) "end " "END" 10) (om-load-inputfun (quote input-funbox) "step" "STEP" 1))) (om-make-point 272 164) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "REDUCE" (quote reduce) (quote ((om-load-inputfun (quote input-funbox) "FUNCTION" "FUNCTION" nil) (om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 143 265) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "upper" 2 (om-make-point 87 51) "" "upper" 7 nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "lower" 1 (om-make-point 41 52) "" "lower" 0 nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "count" 0 (om-make-point 267 37) "" "count" 4 nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((4 0 0 0 nil 0) (2 0 0 1 nil 0) (0 0 1 0 nil 0) (11 0 3 0 nil 0) (13 0 3 1 ((om-make-point 57 108) (om-make-point 57 213) (om-make-point 166 322) (om-make-point 204 318)) 0) (6 0 4 0 nil 0) (12 0 5 1 ((om-make-point 103 107) (om-make-point 45 185) (om-make-point 29 179) (om-make-point 79 259)) 0) (5 0 6 0 nil 0) (3 0 6 1 ((om-make-point 198 351) (om-make-point 351 353) (om-make-point 352 415) (om-make-point 352 480)) 0) (12 0 7 0 nil 0) (13 0 7 1 nil 0) (7 0 8 2 nil 0) (9 0 10 0 nil 0) (14 0 10 1 nil 0) (8 0 11 0 nil 0) (10 0 11 1 nil 0))) nil 7.01))
