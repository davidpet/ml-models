; OM File Header - Saved 2023/01/17 19:26:15
; (7.01 :patc (om-make-point 24 24) (om-make-point 50 50) (om-make-point 500 360) "" 183 0 nil "2023/01/17 18:32:48")
; End File Header
; External resources 
; (list (list (quote :abstraction) "#P\"C:misc/split-list.omp\""))
(in-package :om)(load-lib-for (quote nil))(setf *om-current-persistent* (om-load-patch1 "add-to-last-n" (quote ((let ((box (om-load-boxcall (quote lispfun) "APPEND" (quote append) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 85 397) (om-make-point 44 42) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM+" (quote om+) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 127 336) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM-" (quote om-) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 163 195) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LENGTH" (quote length) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 116 144) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote patch-box) "split-list" (quote ("elements" "misc" "split-list")) (quote ((om-load-inputfun (quote input-funbox) "" "list" (list 1 2 3 4 5)) (om-load-inputfun (quote input-funbox) "" "itemsinleft" 0))) (om-make-point 73 250) nil nil nil nil 2))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 93 458) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "add" 2 (om-make-point 292 0) "" "add" 1 nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "n" 1 (om-make-point 135 0) "" "n" 1 nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "list" 0 (om-make-point 5 45) "" "list" (list 1 2 3 4 5) nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((4 0 0 0 nil 0) (1 0 0 1 nil 0) (4 1 1 0 nil 0) (6 0 1 1 nil 0) (3 0 2 0 nil 0) (7 0 2 1 nil 0) (8 0 3 0 nil 0) (8 0 4 0 nil 0) (2 0 4 1 nil 0) (0 0 5 0 nil 0))) nil 7.01))
