; OM File Header - Saved 2023/01/24 11:48:40
; (7.01 :patc (om-make-point 1036 10) (om-make-point 853 343) (om-make-point 1161 723) "" 183 0 "2023/01/24 11:10:37" "2023/01/24 11:48:24")
; End File Header
(in-package :om)(load-lib-for (quote ("my-lib")))(setf *om-current-persistent* (om-load-patch1 "make-tree-tests" (quote ((let ((box (om-load-boxcomment "comment" (om-make-point 323 26) (quote "This is wrong value from walk-tree (fix it when fix that)") "" (om-make-point 794 143) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 110 26) (quote "todo: edge cases") "" (om-make-point 486 66) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 3" (om-make-point 121 58) (quote "Complex") "" (om-make-point 622 115) nil (om-make-color 0 0 0) (om-make-font "Verdana" 27 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TEXTFILE 4" (quote textfile) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "input data or text" "exp-list" nil) (om-load-inputfunmenu1 (quote input-funmenu) "append or supersede" "ed-mode" "supersede" (list (list "append" "append") (list "supersede" "supersede"))) (om-load-inputfunmenu1 (quote input-funmenu) "eval interpretation mode" "eval-mode" "list" (list (list "text" "text") (list "data list" "data") (list "list" "list") (list "value" "value"))))) (om-make-point 743 477) (om-make-point 70 50) (load-buffer-textfile (quote ("nil" "")) (quote textfile) "supersede" "list") nil nil (pairlis (quote (winpos winsize)) (list (om-make-point 10 40) (om-make-point 335 275))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 5" (quote t) (quote nil) (om-make-point 782 319) (om-make-point 160 28) (list (list (list (quote a) (quote b) (list (quote c) (list (quote d) (list (quote e)))) (quote f) (list (list (quote g)))))) "(((a b (c ( d ( e))) f ((g)))))" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "EQUAL 3" (quote equal) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil) (om-load-inputfun (quote input-funbox) "Y" "Y" nil))) (om-make-point 726 402) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 4" (quote t) (quote nil) (om-make-point 511 187) (om-make-point 567 28) (list (list (list (list (list 0 0 0) (quote a)) (list (list 0 0 1) (quote b)) (list (list (list 0 0 2 0) (quote c)) (list (list (list 0 0 2 1 0) (quote d)) (list (list (list 0 0 2 1 1 0) (quote e))))) (list (list 0 0 3) (quote f)) (list (list (list (list 0 0 4 0 0) (quote g))))))) "(((((0 0 0) a) ((0 0 1) b) (((0 0 2 0) c) (((0 0 2 1 0) d) (((0 0 2 1 1 0) e)))) ((0 0 3) f) ((((0 0 4 0 0) g))))))" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "MAKE-TREE 3" (quote dp::make-tree) (quote ((om-load-inputfun (quote input-funbox) "List of paths (list of indices)" "PATHS" nil))) (om-make-point 681 301) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 2" (om-make-point 114 58) (quote "2 Levels") "" (om-make-point 365 117) nil (om-make-color 0 0 0) (om-make-font "Verdana" 27 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TEXTFILE 3" (quote textfile) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "input data or text" "exp-list" nil) (om-load-inputfunmenu1 (quote input-funmenu) "append or supersede" "ed-mode" "supersede" (list (list "append" "append") (list "supersede" "supersede"))) (om-load-inputfunmenu1 (quote input-funmenu) "eval interpretation mode" "eval-mode" "list" (list (list "text" "text") (list "data list" "data") (list "list" "list") (list "value" "value"))))) (om-make-point 449 383) (om-make-point 70 50) (load-buffer-textfile (quote ("t" "")) (quote textfile) "supersede" "list") nil nil (pairlis (quote (winpos winsize)) (list (om-make-point 10 40) (om-make-point 335 275))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 468 288) (om-make-point 96 28) (list nil nil (list nil nil)) "(nil nil (nil nil))" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "EQUAL 2" (quote equal) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil) (om-load-inputfun (quote input-funbox) "Y" "Y" nil))) (om-make-point 448 318) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 2" (quote list) (quote nil) (om-make-point 368 182) (om-make-point 111 28) (list (list 0) (list 1) (list 2 0) (list 2 1)) "((0) (1) (2 0) (2 1))" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "MAKE-TREE 2" (quote dp::make-tree) (quote ((om-load-inputfun (quote input-funbox) "List of paths (list of indices)" "PATHS" nil))) (om-make-point 402 231) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TEXTFILE 2" (quote textfile) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "input data or text" "exp-list" nil) (om-load-inputfunmenu1 (quote input-funmenu) "append or supersede" "ed-mode" "supersede" (list (list "append" "append") (list "supersede" "supersede"))) (om-load-inputfunmenu1 (quote input-funmenu) "eval interpretation mode" "eval-mode" "list" (list (list "text" "text") (list "data list" "data") (list "list" "list") (list "value" "value"))))) (om-make-point 306 593) (om-make-point 70 50) (load-buffer-textfile (quote ("nil" "")) (quote textfile) "supersede" "list") nil nil (pairlis (quote (winpos winsize)) (list (om-make-point 10 40) (om-make-point 335 275))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OMAND" (quote omand) (quote ((om-load-inputfun (quote input-funbox) "something" "SELF" nil) (om-load-inputfun (quote input-funbox) "other things" "REST" nil) (om-load-inputfun (quote input-funbox) "other things" "REST" nil))) (om-make-point 307 501) (om-make-point 34 35) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 154 58) (quote "Single Item") "" (om-make-point 131 111) nil (om-make-color 0 0 0) (om-make-font "Verdana" 27 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TEXTFILE" (quote textfile) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "input data or text" "exp-list" nil) (om-load-inputfunmenu1 (quote input-funmenu) "append or supersede" "ed-mode" "supersede" (list (list "append" "append") (list "supersede" "supersede"))) (om-load-inputfunmenu1 (quote input-funmenu) "eval interpretation mode" "eval-mode" "list" (list (list "text" "text") (list "data list" "data") (list "list" "list") (list "value" "value"))))) (om-make-point 234 386) (om-make-point 70 50) (load-buffer-textfile (quote ("t" "")) (quote textfile) "supersede" "list") nil nil (pairlis (quote (winpos winsize)) (list (om-make-point 10 40) (om-make-point 335 275))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 231 272) (om-make-point 41 28) (list nil) "(nil)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "EQUAL" (quote equal) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil) (om-load-inputfun (quote input-funbox) "Y" "Y" nil))) (om-make-point 211 302) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 138 181) (om-make-point 35 28) (list (list 0)) "((0))" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "MAKE-TREE" (quote dp::make-tree) (quote ((om-load-inputfun (quote input-funbox) "List of paths (list of indices)" "PATHS" nil))) (om-make-point 178 213) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((5 0 3 1 nil 0) (7 0 5 0 nil 0) (4 0 5 1 nil 0) (6 0 7 0 nil 0) (11 0 9 1 nil 0) (13 0 11 0 nil 0) (10 0 11 1 nil 0) (12 0 13 0 nil 0) (15 0 14 1 nil 0) (17 1 15 0 nil 0) (9 1 15 1 nil 0) (3 1 15 2 nil 0) (19 0 17 1 nil 0) (21 0 19 0 nil 0) (18 0 19 1 nil 0) (20 0 21 0 nil 0))) nil 7.01))
