; OM File Header - Saved 2023/01/24 11:48:40
; (7.01 :patc (om-make-point 712 10) (om-make-point 121 187) (om-make-point 1886 723) "" 183 0 "2023/01/24 10:29:16" "2023/01/24 11:48:34")
; End File Header
(in-package :om)(load-lib-for (quote ("my-lib")))(setf *om-current-persistent* (om-load-patch1 "walk-tree-tests" (quote ((let ((box (om-load-boxcomment "comment 5" (om-make-point 121 58) (quote "Complex") "" (om-make-point 1422 18) nil (om-make-color 0 0 0) (om-make-font "Verdana" 27 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 190 26) (quote "BUG - this is not the righ result") "" (om-make-point 1646 126) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TEXTFILE 6" (quote textfile) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "input data or text" "exp-list" nil) (om-load-inputfunmenu1 (quote input-funmenu) "append or supersede" "ed-mode" "supersede" (list (list "append" "append") (list "supersede" "supersede"))) (om-load-inputfunmenu1 (quote input-funmenu) "eval interpretation mode" "eval-mode" "list" (list (list "text" "text") (list "data list" "data") (list "list" "list") (list "value" "value"))))) (om-make-point 1564 426) (om-make-point 70 50) (load-buffer-textfile (quote ("t" "")) (quote textfile) "supersede" "list") nil nil (pairlis (quote (winpos winsize)) (list (om-make-point 10 40) (om-make-point 335 275))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 6" (quote t) (quote nil) (om-make-point 1573 241) (om-make-point 567 28) (list (list (list (list (list 0 0 0) (quote a)) (list (list 0 0 1) (quote b)) (list (list (list 0 0 2 0) (quote c)) (list (list (list 0 0 2 1 0) (quote d)) (list (list (list 0 0 2 1 1 0) (quote e))))) (list (list 0 0 3) (quote f)) (list (list (list (list 0 0 4 0 0) (quote g))))))) "(((((0 0 0) a) ((0 0 1) b) (((0 0 2 0) c) (((0 0 2 1 0) d) (((0 0 2 1 1 0) e)))) ((0 0 3) f) ((((0 0 4 0 0) g))))))" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "EQUAL 5" (quote equal) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil) (om-load-inputfun (quote input-funbox) "Y" "Y" nil))) (om-make-point 1553 271) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 5" (quote t) (quote nil) (om-make-point 1418 102) (om-make-point 160 28) (list (list (list (quote a) (quote b) (list (quote c) (list (quote d) (list (quote e)))) (quote f) (list (list (quote g)))))) "(((a b (c ( d ( e))) f ((g)))))" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "WALK-TREE 5" (quote dp::walk-tree) (quote ((om-load-inputfun (quote input-funbox) "a tree structure within a list" "TREE" nil) (om-load-inputfun (quote input-funbox) "a function that takes a leaf value and a path (list of indices) [default = just returns value back]" "FN" nil))) (om-make-point 1518 139) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 151 26) (quote "TODO: more edge cases") "" (om-make-point 836 26) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 4" (om-make-point 110 58) (quote "Lambda") "" (om-make-point 1082 5) nil (om-make-color 0 0 0) (om-make-font "Verdana" 27 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TEXTFILE 5" (quote textfile) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "input data or text" "exp-list" nil) (om-load-inputfunmenu1 (quote input-funmenu) "append or supersede" "ed-mode" "supersede" (list (list "append" "append") (list "supersede" "supersede"))) (om-load-inputfunmenu1 (quote input-funmenu) "eval interpretation mode" "eval-mode" "list" (list (list "text" "text") (list "data list" "data") (list "list" "list") (list "value" "value"))))) (om-make-point 1198 410) (om-make-point 70 50) (load-buffer-textfile (quote ("t" "")) (quote textfile) "supersede" "list") nil nil (pairlis (quote (winpos winsize)) (list (om-make-point 10 40) (om-make-point 335 275))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 4" (quote t) (quote nil) (om-make-point 1156 232) (om-make-point 270 28) (list (list (list 0) (list (quote a) (list 0))) (list (list (list 1 0) (list (quote b) (list 1 0))) (list (list 1 1) (list (quote c) (list 1 1))))) "(((0) (a (0))) (((1 0) (b (1 0))) ((1 1) (c (1 1)))))" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "EQUAL 4" (quote equal) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil) (om-load-inputfun (quote input-funbox) "Y" "Y" nil))) (om-make-point 1136 262) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "squish" (om-load-patch-abs1 "squish" (quote ((let ((box (om-load-boxcall (quote lispfun) "LIST" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 56 158) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 67 284) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) "newvalue" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "path" 1 (om-make-point 55 45) "" "path" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "value" 0 (om-make-point 5 45) "" "value" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((3 0 0 0 nil 0) (2 0 0 1 nil 0) (0 0 1 0 nil 0))) 7.01 nil "" (om-make-point 534 210) (om-make-point 400 480)) (quote ((om-load-inputfun (quote input-funbox) "" "value" nil) (om-load-inputfun (quote input-funbox) "" "path" nil))) (om-make-point 1165 82) nil (list nil) "l" "squish"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 4" (quote list) (quote nil) (om-make-point 1089 85) (om-make-point 53 28) (list (quote a) (list (quote b) (quote c))) "(a (b c))" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "WALK-TREE 4" (quote dp::walk-tree) (quote ((om-load-inputfun (quote input-funbox) "a tree structure within a list" "TREE" nil) (om-load-inputfun (quote input-funbox) "a function that takes a leaf value and a path (list of indices) [default = just returns value back]" "FN" nil))) (om-make-point 1111 152) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TEXTFILE 4" (quote textfile) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "input data or text" "exp-list" nil) (om-load-inputfunmenu1 (quote input-funmenu) "append or supersede" "ed-mode" "supersede" (list (list "append" "append") (list "supersede" "supersede"))) (om-load-inputfunmenu1 (quote input-funmenu) "eval interpretation mode" "eval-mode" "list" (list (list "text" "text") (list "data list" "data") (list "list" "list") (list "value" "value"))))) (om-make-point 475 695) (om-make-point 70 50) (load-buffer-textfile (quote ("t" "")) (quote textfile) "supersede" "list") nil nil (pairlis (quote (winpos winsize)) (list (om-make-point 10 40) (om-make-point 335 275))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 3" (om-make-point 67 58) (quote "Tree") "" (om-make-point 649 13) nil (om-make-color 0 0 0) (om-make-font "Verdana" 27 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 701 205) (om-make-point 326 28) (list (list (list 0) (quote a)) (list (list (list 1 0) (quote b)) (list (list 1 1) (quote c)) (list (list (list 1 2 0) (quote d)) (list (list 1 2 1) (quote e)))) (list (list 2) (quote f))) "(((0) a) (((1 0) b) ((1 1) c) (((1 2 0) d) ((1 2 1) e))) ((2) f))" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TEXTFILE 3" (quote textfile) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "input data or text" "exp-list" nil) (om-load-inputfunmenu1 (quote input-funmenu) "append or supersede" "ed-mode" "supersede" (list (list "append" "append") (list "supersede" "supersede"))) (om-load-inputfunmenu1 (quote input-funmenu) "eval interpretation mode" "eval-mode" "list" (list (list "text" "text") (list "data list" "data") (list "list" "list") (list "value" "value"))))) (om-make-point 682 370) (om-make-point 70 50) (load-buffer-textfile (quote ("t" "")) (quote textfile) "supersede" "list") nil nil (pairlis (quote (winpos winsize)) (list (om-make-point 10 40) (om-make-point 335 275))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "EQUAL 3" (quote equal) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil) (om-load-inputfun (quote input-funbox) "Y" "Y" nil))) (om-make-point 672 255) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 3" (quote list) (quote nil) (om-make-point 592 76) (om-make-point 88 28) (list (quote a) (list (quote b) (quote c) (list (quote d) (quote e))) (quote f)) "(a (b c (d e)) f)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "WALK-TREE 3" (quote dp::walk-tree) (quote ((om-load-inputfun (quote input-funbox) "a tree structure within a list" "TREE" nil) (om-load-inputfun (quote input-funbox) "a function that takes a leaf value and a path (list of indices) [default = just returns value back]" "FN" nil))) (om-make-point 653 139) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 2" (om-make-point 154 58) (quote "Single Item") "" (om-make-point 375 9) nil (om-make-color 0 0 0) (om-make-font "Verdana" 27 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 497 226) (om-make-point 63 28) (list (list (list 0) 1)) "(((0) 1))" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 408 67) (om-make-point 35 28) (list 1) "(1)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TEXTFILE 2" (quote textfile) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "input data or text" "exp-list" nil) (om-load-inputfunmenu1 (quote input-funmenu) "append or supersede" "ed-mode" "supersede" (list (list "append" "append") (list "supersede" "supersede"))) (om-load-inputfunmenu1 (quote input-funmenu) "eval interpretation mode" "eval-mode" "list" (list (list "text" "text") (list "data list" "data") (list "list" "list") (list "value" "value"))))) (om-make-point 476 365) (om-make-point 70 50) (load-buffer-textfile (quote ("t" "")) (quote textfile) "supersede" "list") nil nil (pairlis (quote (winpos winsize)) (list (om-make-point 10 40) (om-make-point 335 275))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "EQUAL 2" (quote equal) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil) (om-load-inputfun (quote input-funbox) "Y" "Y" nil))) (om-make-point 477 256) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "WALK-TREE 2" (quote dp::walk-tree) (quote ((om-load-inputfun (quote input-funbox) "a tree structure within a list" "TREE" nil) (om-load-inputfun (quote input-funbox) "a function that takes a leaf value and a path (list of indices) [default = just returns value back]" "FN" nil))) (om-make-point 441 120) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 129 58) (quote "Basic List") "" (om-make-point 77 15) nil (om-make-color 0 0 0) (om-make-font "Verdana" 27 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OMAND" (quote omand) (quote ((om-load-inputfun (quote input-funbox) "something" "SELF" nil) (om-load-inputfun (quote input-funbox) "other things" "REST" nil) (om-load-inputfun (quote input-funbox) "other things" "REST" nil) (om-load-inputfun (quote input-funbox) "other things" "REST" nil) (om-load-inputfun (quote input-funbox) "other things" "REST" nil))) (om-make-point 454 626) (om-make-point 100 35) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TEXTFILE" (quote textfile) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "input data or text" "exp-list" nil) (om-load-inputfunmenu1 (quote input-funmenu) "append or supersede" "ed-mode" "supersede" (list (list "append" "append") (list "supersede" "supersede"))) (om-load-inputfunmenu1 (quote input-funmenu) "eval interpretation mode" "eval-mode" "list" (list (list "text" "text") (list "data list" "data") (list "list" "list") (list "value" "value"))))) (om-make-point 121 345) (om-make-point 70 50) (load-buffer-textfile (quote ("t" "")) (quote textfile) "supersede" "list") nil nil (pairlis (quote (winpos winsize)) (list (om-make-point 10 40) (om-make-point 335 275))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "EQUAL" (quote equal) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil) (om-load-inputfun (quote input-funbox) "Y" "Y" nil))) (om-make-point 149 256) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 2" (quote list) (quote nil) (om-make-point 174 186) (om-make-point 139 28) (list (list (list 0) 1) (list (list 1) 2) (list (list 2) 3)) "(((0) 1) ((1) 2) ((2) 3))" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 87 76) (om-make-point 45 28) (list 1 2 3) "(1 2 3)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "WALK-TREE" (quote dp::walk-tree) (quote ((om-load-inputfun (quote input-funbox) "a tree structure within a list" "TREE" nil) (om-load-inputfun (quote input-funbox) "a function that takes a leaf value and a path (list of indices) [default = just returns value back]" "FN" nil))) (om-make-point 112 124) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((4 0 2 1 nil 0) (6 0 4 0 nil 0) (3 0 4 1 nil 0) (5 0 6 0 nil 0) (11 0 9 1 nil 0) (14 0 11 0 nil 0) (10 0 11 1 nil 0) (13 0 14 0 nil 0) (12 0 14 1 nil 0) (29 0 15 1 nil 0) (19 0 18 1 nil 0) (21 0 19 0 nil 0) (17 0 19 1 nil 0) (20 0 21 0 nil 0) (26 0 25 1 nil 0) (27 0 26 0 nil 0) (23 0 26 1 nil 0) (24 0 27 0 nil 0) (30 1 29 0 nil 0) (25 1 29 1 nil 0) (18 1 29 2 nil 0) (9 1 29 3 nil 0) (2 1 29 4 nil 0) (31 0 30 1 nil 0) (34 0 31 0 nil 0) (32 0 31 1 nil 0) (33 0 34 0 nil 0))) nil 7.01))
