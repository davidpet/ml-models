; OM File Header - Saved 2023/01/24 11:48:40
; (7.01 :patc (om-make-point 712 10) (om-make-point 772 194) (om-make-point 931 759) "" 183 0 "2023/01/24 11:00:10" "2023/01/24 11:44:14")
; End File Header
(in-package :om)(load-lib-for (quote ("my-lib")))(setf *om-current-persistent* (om-load-patch1 "group-by-tests" (quote ((let ((box (om-load-boxcomment "comment" (om-make-point 118 26) (quote "TODO: edge cases") "" (om-make-point 311 144) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TEXTFILE 4" (quote textfile) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "input data or text" "exp-list" nil) (om-load-inputfunmenu1 (quote input-funmenu) "append or supersede" "ed-mode" "supersede" (list (list "append" "append") (list "supersede" "supersede"))) (om-load-inputfunmenu1 (quote input-funmenu) "eval interpretation mode" "eval-mode" "list" (list (list "text" "text") (list "data list" "data") (list "list" "list") (list "value" "value"))))) (om-make-point 285 771) (om-make-point 70 50) (load-buffer-textfile (quote ("t" "")) (quote textfile) "supersede" "list") nil nil (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TEXTFILE 3" (quote textfile) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "input data or text" "exp-list" nil) (om-load-inputfunmenu1 (quote input-funmenu) "append or supersede" "ed-mode" "supersede" (list (list "append" "append") (list "supersede" "supersede"))) (om-load-inputfunmenu1 (quote input-funmenu) "eval interpretation mode" "eval-mode" "list" (list (list "text" "text") (list "data list" "data") (list "list" "list") (list "value" "value"))))) (om-make-point 492 602) (om-make-point 70 50) (load-buffer-textfile (quote ("t" "")) (quote textfile) "supersede" "list") nil nil (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 6" (quote t) (quote nil) (om-make-point 503 478) (om-make-point 61 28) (list (list (quote d) (quote e) (quote f))) "((d e f))" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "EQUAL 3" (quote equal) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil) (om-load-inputfun (quote input-funbox) "Y" "Y" nil))) (om-make-point 483 508) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 5" (quote t) (quote nil) (om-make-point 446 362) (om-make-point 26 28) (quote d) "d" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "GETHASH 2" (quote gethash) (quote ((om-load-inputfun (quote input-funbox) "KEY" "KEY" nil) (om-load-inputfun (quote input-funbox) "HASH-TABLE" "HASH-TABLE" nil))) (om-make-point 479 351) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TEXTFILE 2" (quote textfile) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "input data or text" "exp-list" nil) (om-load-inputfunmenu1 (quote input-funmenu) "append or supersede" "ed-mode" "supersede" (list (list "append" "append") (list "supersede" "supersede"))) (om-load-inputfunmenu1 (quote input-funmenu) "eval interpretation mode" "eval-mode" "list" (list (list "text" "text") (list "data list" "data") (list "list" "list") (list "value" "value"))))) (om-make-point 271 583) (om-make-point 70 50) (load-buffer-textfile (quote ("t" "")) (quote textfile) "supersede" "list") nil nil (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 4" (quote t) (quote nil) (om-make-point 306 470) (om-make-point 101 28) (list (list (quote a) (quote b) (quote c)) (list (quote a) (quote g) (quote h))) "((a b c) (a g h))" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "EQUAL 2" (quote equal) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil) (om-load-inputfun (quote input-funbox) "Y" "Y" nil))) (om-make-point 261 500) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 203 365) (om-make-point 26 28) (quote a) "a" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "GETHASH" (quote gethash) (quote ((om-load-inputfun (quote input-funbox) "KEY" "KEY" nil) (om-load-inputfun (quote input-funbox) "HASH-TABLE" "HASH-TABLE" nil))) (om-make-point 219 395) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 145 58) (quote "Basic Case") "" (om-make-point 129 142) nil (om-make-color 0 0 0) (om-make-font "Verdana" 27 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OMAND" (quote omand) (quote ((om-load-inputfun (quote input-funbox) "something" "SELF" nil) (om-load-inputfun (quote input-funbox) "other things" "REST" nil) (om-load-inputfun (quote input-funbox) "other things" "REST" nil))) (om-make-point 279 690) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TEXTFILE" (quote textfile) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "input data or text" "exp-list" nil) (om-load-inputfunmenu1 (quote input-funmenu) "append or supersede" "ed-mode" "supersede" (list (list "append" "append") (list "supersede" "supersede"))) (om-load-inputfunmenu1 (quote input-funmenu) "eval interpretation mode" "eval-mode" "list" (list (list "text" "text") (list "data list" "data") (list "list" "list") (list "value" "value"))))) (om-make-point 132 570) (om-make-point 70 50) (load-buffer-textfile (quote ("t" "")) (quote textfile) "supersede" "list") nil nil (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 175 464) (om-make-point 26 28) 2 "2" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "EQUAL" (quote equal) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil) (om-load-inputfun (quote input-funbox) "Y" "Y" nil))) (om-make-point 155 494) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "HASH-TABLE-COUNT" (quote hash-table-count) (quote ((om-load-inputfun (quote input-funbox) "HASH-TABLE" "HASH-TABLE" nil))) (om-make-point 81 404) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 130 196) (om-make-point 40 28) (quote first) "first" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 207 201) (om-make-point 127 28) (list (list (quote a) (quote b) (quote c)) (list (quote d) (quote e) (quote f)) (list (quote a) (quote g) (quote h))) "((a b c) (d e f) (a g h))" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "GROUP-BY" (quote dp::group-by) (quote ((om-load-inputfun (quote input-funbox) "fn that takes an element and returns the value to group by" "FN" nil) (om-load-inputfun (quote input-funbox) "list of items to be grouped" "LIST" nil))) (om-make-point 153 236) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((13 0 1 1 nil 0) (4 0 2 1 nil 0) (6 0 4 0 nil 0) (3 0 4 1 nil 0) (5 0 6 0 nil 0) (20 0 6 1 nil 0) (9 0 7 1 nil 0) (11 0 9 0 nil 0) (8 0 9 1 nil 0) (10 0 11 0 nil 0) (20 0 11 1 nil 0) (14 1 13 0 nil 0) (7 1 13 1 nil 0) (2 1 13 2 nil 0) (16 0 14 1 nil 0) (17 0 16 0 nil 0) (15 0 16 1 nil 0) (20 0 17 0 nil 0) (18 0 20 0 nil 0) (19 0 20 1 nil 0))) nil 7.01))
