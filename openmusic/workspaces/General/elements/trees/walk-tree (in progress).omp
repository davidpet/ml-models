; OM File Header - Saved 2023/01/31 02:12:49
; (7.01 :patc (om-make-point 604 10) (om-make-point 424 327) (om-make-point 500 360) "" 183 0 "2023/01/19 18:56:39" "2023/01/19 19:08:35")
; End File Header
(in-package :om)(load-lib-for (quote nil))(setf *om-current-persistent* (om-load-patch1 "walk-tree (in progress)" (quote ((let ((box (om-load-boxcall (quote lispfun) "1-" (quote 1-) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil))) (om-make-point 448 88) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LENGTH" (quote length) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 418 38) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "ARITHM-SER" (quote arithm-ser) (quote ((om-load-inputfun (quote input-funbox) "begin" "BEGIN" 0) (om-load-inputfun (quote input-funbox) "end " "END" 10) (om-load-inputfun (quote input-funbox) "step" "STEP" 1))) (om-make-point 378 132) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "MAPCAR" (quote mapcar) (quote ((om-load-inputfun (quote input-funbox) "FUNCTION" "FUNCTION" nil) (om-load-inputfun (quote input-funbox) "LIST" "LIST" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 328 249) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LIST" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 185 131) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OMIF" (quote omif) (quote ((om-load-inputfun (quote input-funbox) "IF" "TEST" nil) (om-load-inputfun (quote input-funbox) "THEN" "ACTION" nil) (om-load-inputfun (quote input-funbox) "ELSE" "ELSE" nil))) (om-make-point 185 195) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "ATOM" (quote atom) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil))) (om-make-point 142 132) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 71 299) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) "leaves" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "tree" 0 (om-make-point 188 38) "" "tree" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((1 0 0 0 nil 0) (8 0 1 0 nil 0) (0 0 2 1 nil 0) (8 0 3 1 nil 0) (2 0 3 2 nil 0) (8 0 4 0 nil 0) (6 0 5 0 nil 0) (4 0 5 1 nil 0) (8 0 6 0 nil 0) (5 0 7 0 nil 0))) nil 7.01))
