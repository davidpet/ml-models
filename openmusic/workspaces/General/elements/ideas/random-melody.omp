; OM File Header - Saved 2023/09/22 10:32:36
; (7.01 :patc (om-make-point 446 251) (om-make-point 724 158) (om-make-point 1031 902) "" 183 0 "2023/01/20 15:05:28" "2023/01/23 18:33:45")
; End File Header
; External resources 
; (list (list (quote :abstraction) "#P\"C:../scales/snap-to-scale.omp\"" "#P\"C:../misc/random-weighted-value.omp\"" "#P\"C:random-pitch-sequence.omp\""))
(in-package :om)(load-lib-for (quote ("Profile")))(setf *om-current-persistent* (om-load-patch1 "random-melody" (quote ((let ((box (om-load-boxcomment "comment" (om-make-point 409 65) (quote "Possible Improvements:$1. Allow a smoothness value to pick how smooth the melody should be$2. Output multiple interpolations$3. Maintain the high and low from the input somehow") "" (om-make-point 578 421) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote patch-box) "snap-to-scale" (quote ("elements" "scales" "snap-to-scale")) (quote ((om-load-inputfun (quote input-funbox) "" "pitch" (list 6000 6200 6300 5900 6000)) (om-load-inputfun (quote input-funbox) "" "scale" (list 6000 6200 6400 6500 6700 6900 7100)))) (om-make-point 186 814) nil nil nil nil 2))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 92 26) (quote "smoothed out") "" (om-make-point 778 758) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "VOICE 2" (quote voice) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "a list representing a rhythm tree" "tree" (list (quote ?) (list (list (list 4 4) (list 1 1 1 1))))) (om-load-inputfun (quote input-funbox) "a chord object, a list of chords, a list of midics, a list of lists of midics..." "chords" (list (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord))) (om-load-inputfun (quote input-funbox) "frequency of the quarter-note (default 60/mn)" "tempo" 60) (om-load-inputfun (quote input-funbox) "overlapping percentage between every successive chords, calculated from the second chord's duration" "legato" 100) (om-load-inputfun (quote input-funbox) "sub lists (one sub list per chord) indicating notes to be tied to notes of the same value, in a next chord" "ties" nil))) (om-make-point 484 794) (om-make-point 436 91) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (4 (((4 4) (2 2)) ((4 4) ((1 (1 1)) 1 2)) ((4 4) (2.0 -2)) ((4 4) (-2 (1 (-1 1)) 1))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 120) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale)) (list 2 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil nil (quote :midi-player) 1 nil 1000 0 (om-make-point 370 280) (om-make-point 400 20) 0 1 (quote :normal) (quote t) nil)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "smooth" (om-load-patch-abs1 "smooth" (quote ((let ((box (om-load-boxout "output" 0 (om-make-point 181 585) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) "smoothed" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "NTH" (quote nth) (quote ((om-load-inputfun (quote input-funbox) "ORIG-N" "ORIG-N" 5) (om-load-inputfun (quote input-funbox) "ORIG-LIST" "ORIG-LIST" nil))) (om-make-point 264 484) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "INTERPOL-PROF" (quote |Profile|::interpol-prof) (quote ((om-load-inputfun (quote input-funbox) "" "PROF1" (list 6000 6600 7100)) (om-load-inputfun (quote input-funbox) "" "PROF2" (list 4200 3200 5000 6400 7200)) (om-load-inputfun (quote input-funbox) "" "STEPS" 10) (om-load-inputfun (quote input-funbox) "" "NBR-N" nil) (om-load-inputfun (quote input-funbox) "" "TAB" (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 100)) (quote (0 100)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj)) (om-load-inputfun (quote input-funbox) "" "NOTE?" nil) (om-load-inputfun (quote input-funbox) "" "PRECIS" 10) (om-load-inputfun (quote input-funbox) "" "APPROX" 2))) (om-make-point 248 403) nil nil "&" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "REPEAT-N" (quote repeat-n) (quote ((om-load-inputfun (quote input-funbox) "something" "SELF" nil) (om-load-inputfun (quote input-funbox) "times" "N" 0))) (om-make-point 116 342) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM/" (quote om/) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 1) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 1))) (om-make-point 67 288) nil nil "&" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 23 180) (om-make-point 28 28) (quote +) "+" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "APPLY" (quote apply) (quote ((om-load-inputfun (quote input-funbox) "FUNCTION" "FUNCTION" nil) (om-load-inputfun (quote input-funbox) "ARG" "ARG" nil))) (om-make-point 48 216) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LENGTH" (quote length) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 89 132) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "melody" 0 (om-make-point 5 45) "" "melody" (list 100 300 500 700) nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((1 0 0 0 nil 0) (2 0 1 1 nil 0) (3 0 2 0 nil 0) (8 0 2 1 ((om-make-point 25 101) (om-make-point 265 102) (om-make-point 266 252) (om-make-point 266 403)) 0) (4 0 3 0 nil 0) (7 0 3 1 nil 0) (6 0 4 0 nil 0) (7 0 4 1 nil 0) (5 0 6 0 nil 0) (8 0 6 1 nil 0) (8 0 7 0 nil 0))) 7.01 nil "" (om-make-point 1187 307) (om-make-point 516 614)) (quote ((om-load-inputfun (quote input-funbox) "" "melody" nil))) (om-make-point 69 796) nil (list (list 6400 6800 6700 6400 6400 6400 7000 6700 7100)) nil "smooth"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 101 26) (quote "random pitches") "" (om-make-point 0 590) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 680 898) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) "voice" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 4" (quote t) (quote nil) (om-make-point 403 511) (om-make-point 38 28) 120 "120" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM-" (quote om-) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 175 376) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 239 416) (om-make-point 56 28) (quote minusp) "minusp" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "COUNT-IF" (quote count-if) (quote ((om-load-inputfun (quote input-funbox) "PREDICATE" "PREDICATE" nil) (om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 280 456) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "VOICE" (quote voice) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "a list representing a rhythm tree" "tree" (list (quote ?) (list (list (list 4 4) (list 1 1 1 1))))) (om-load-inputfun (quote input-funbox) "a chord object, a list of chords, a list of midics, a list of lists of midics..." "chords" (list (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord))) (om-load-inputfun (quote input-funbox) "frequency of the quarter-note (default 60/mn)" "tempo" 60) (om-load-inputfun (quote input-funbox) "overlapping percentage between every successive chords, calculated from the second chord's duration" "legato" 100) (om-load-inputfun (quote input-funbox) "sub lists (one sub list per chord) indicating notes to be tied to notes of the same value, in a next chord" "ties" nil))) (om-make-point 93 612) (om-make-point 507 116) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (4 (((4 4) (2 2)) ((4 4) ((1 (1 1)) 1 2)) ((4 4) (2.0 -2)) ((4 4) (-2 (1 (-1 1)) 1))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (6666)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7199)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7728)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7681)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6464)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7237)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7212)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6879)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 120) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale)) (list 2 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil nil (quote :midi-player) 1 nil 1000 0 (om-make-point 370 280) (om-make-point 400 20) 0 1 (quote :normal) (quote t) nil)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "MKTREE" (quote mktree) (quote ((om-load-inputfun (quote input-funbox) "list of integer ratios" "RHYTHM" (list 1/4 1/4 1/4 1/4)) (om-load-inputfun (quote input-funbox) "list of time signatures" "TIMESIGNS" (list 4 4)))) (om-make-point 462 475) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "REPEAT-N" (quote repeat-n) (quote ((om-load-inputfun (quote input-funbox) "something" "SELF" nil) (om-load-inputfun (quote input-funbox) "times" "N" 0))) (om-make-point 511 367) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 393 307) (om-make-point 105 28) (list 1 1 4 1 6 1 8 1) "(1 1 4 1 6 1 8 1)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 203 285) (om-make-point 188 28) (list 1 -1 1/2 -1/2 1/4 -1/4 1/8 -1/8) "(1 -1 1/2 -1/2 1/4 -1/4 1/8 -1/8)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote patch-box) "random-weighted-value" (quote ("elements" "misc" "random-weighted-value")) (quote ((om-load-inputfun (quote input-funbox) "list of possible values" "values" (list 1 2 3 4 5 6)) (om-load-inputfun (quote input-funbox) "list of relative proportions of values (n/total = probability)" "proportions" (list 1 1 1 1 1 1)))) (om-make-point 265 324) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "timesignature" 5 (om-make-point 316 38) "" "timesignature" (list 4 4) nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "count" 4 (om-make-point 229 47) "" "count" 10 nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "highest" 3 (om-make-point 168 46) "" "highest" 7900 nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "lowest" 2 (om-make-point 118 44) "" "lowest" 6000 nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "scale" 1 (om-make-point 71 47) "" "scale" (list 6000 6200 6400 6500 6700 6900 7100) nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "keycenter" 0 (om-make-point 5 45) "" "keycenter" 6000 nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote patch-box) "random-pitch-sequence" (quote ("elements" "ideas" "random-pitch-sequence")) (quote ((om-load-inputfun (quote input-funbox) "" "keycenter" 6000) (om-load-inputfun (quote input-funbox) "" "scale" (list 6000 6200 6400 6500 6700 6900 7100)) (om-load-inputfun (quote input-funbox) "" "lowest" 5500) (om-load-inputfun (quote input-funbox) "" "highest" 7600) (om-load-inputfun (quote input-funbox) "" "count" 10))) (om-make-point 38 408) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((4 0 1 0 nil 0) (21 0 1 1 nil 0) (11 1 3 1 nil 0) (1 0 3 2 nil 0) (7 0 3 3 nil 0) (23 0 4 0 nil 0) (3 0 6 0 nil 0) (18 0 8 0 nil 0) (10 0 8 1 ((om-make-point 301 496) (om-make-point 245 496) (om-make-point 217 423) (om-make-point 189 371) (om-make-point 189 376)) 0) (9 0 10 0 nil 0) (13 0 10 1 nil 0) (12 0 11 1 nil 0) (23 0 11 2 nil 0) (7 0 11 3 nil 0) (13 0 12 0 nil 0) (17 0 12 1 ((om-make-point 352 94) (om-make-point 352 284) (om-make-point 511 108) (om-make-point 492 475)) 0) (16 0 13 0 nil 0) (18 0 13 1 nil 0) (15 0 16 0 nil 0) (14 0 16 1 nil 0) (22 0 23 0 nil 0) (21 0 23 1 nil 0) (20 0 23 2 nil 0) (19 0 23 3 nil 0) (8 0 23 4 nil 0))) nil 7.01))
