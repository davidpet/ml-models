; OM File Header - Saved 2023/01/17 19:26:15
; (7.01 :patc (om-make-point 442 10) (om-make-point 437 273) (om-make-point 500 380) "" 183 0 "2023/01/17 19:22:44" "2023/01/17 19:26:02")
; End File Header
; External resources 
; (list (list (quote :abstraction) "#P\"pitches/pitch-class.omp\""))
(in-package :om)(load-lib-for (quote nil))(setf *om-current-persistent* (om-load-patch1 "count-pitch-classes" (quote ((let ((box (om-load-boxout "output" 0 (om-make-point 132 303) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) "counts" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "COUNT" (quote count) (quote ((om-load-inputfun (quote input-funbox) "ITEM" "ITEM" nil) (om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 40 234) nil nil "l" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 219 117) (om-make-point 32 28) 11 "11" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 188 161) (om-make-point 26 28) 0 "0" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "ARITHM-SER" (quote arithm-ser) (quote ((om-load-inputfun (quote input-funbox) "begin" "BEGIN" 0) (om-load-inputfun (quote input-funbox) "end " "END" 10) (om-load-inputfun (quote input-funbox) "step" "STEP" 1))) (om-make-point 177 191) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "MAPCAR" (quote mapcar) (quote ((om-load-inputfun (quote input-funbox) "FUNCTION" "FUNCTION" nil) (om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 79 272) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote patch-box) "pitch-class" (quote ("elements" "pitches" "pitch-class")) (quote ((om-load-inputfun (quote input-funbox) "" "pitches" 6000))) (om-make-point 57 141) nil nil "&" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "melody" 0 (om-make-point 7 48) "" "melody" (list 6000 6100 6200 6000) nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((5 0 0 0 nil 0) (6 0 1 1 nil 0) (3 0 4 0 nil 0) (2 0 4 1 nil 0) (1 0 5 0 nil 0) (4 0 5 1 nil 0) (7 0 6 0 nil 0))) nil 7.01))
