; OM File Header - Saved 2023/01/17 19:26:15
; (7.01 :patc (om-make-point 226 10) (om-make-point 477 308) (om-make-point 1330 554) "" 183 0 "2023/01/13 09:54:37" "2023/01/13 10:14:15")
; End File Header
(in-package :om)(load-lib-for (quote nil))(setf *om-current-persistent* (om-load-patch1 "pitch-class" (quote ((let ((box (om-load-boxcall (quote abstraction) "single-pitch-class 2" (om-load-patch-abs1 "single-pitch-class" (quote ((let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 149 256) (om-make-point 32 28) 12 "12" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "MOD" (quote mod) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil) (om-load-inputfun (quote input-funbox) "Y" "Y" nil))) (om-make-point 133 286) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 131 183) (om-make-point 38 28) 100 "100" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM/" (quote om/) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 1) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 1))) (om-make-point 121 213) (om-make-point 25 36) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "APPROX-M" (quote approx-m) (quote ((om-load-inputfun (quote input-funbox) "pitch list (midicents)" "SELF" 6000) (om-load-inputfun (quote input-funbox) "tone division" "APPROX" 2))) (om-make-point 69 133) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 135 371) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) "pitchclass" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "pitch" 0 (om-make-point 5 45) "" "pitch" 6000 nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((3 0 1 0 nil 0) (0 0 1 1 nil 0) (4 0 3 0 nil 0) (2 0 3 1 nil 0) (6 0 4 0 nil 0) (1 0 5 0 nil 0))) 7.01 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "" "pitch" nil))) (om-make-point 394 216) nil (list 10) nil "single-pitch-class"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "MAPCAR" (quote mapcar) (quote ((om-load-inputfun (quote input-funbox) "FUNCTION" "FUNCTION" nil) (om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 258 294) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LISTP" (quote listp) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil))) (om-make-point 27 131) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OMIF" (quote omif) (quote ((om-load-inputfun (quote input-funbox) "IF" "TEST" nil) (om-load-inputfun (quote input-funbox) "THEN" "ACTION" nil) (om-load-inputfun (quote input-funbox) "ELSE" "ELSE" nil))) (om-make-point 83 439) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 308 26) (quote "pitchclasses: single value or list, 0 = C, 1 = C#, etc.") nil (om-make-point 132 609) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 254 26) (quote "pitches: single midicent or list of midicents") nil (om-make-point 94 66) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "single-pitch-class" (om-load-patch-abs1 "single-pitch-class" (quote ((let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 149 256) (om-make-point 32 28) 12 "12" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "MOD" (quote mod) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil) (om-load-inputfun (quote input-funbox) "Y" "Y" nil))) (om-make-point 133 286) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 131 183) (om-make-point 38 28) 100 "100" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM/" (quote om/) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 1) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 1))) (om-make-point 121 213) (om-make-point 25 36) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "APPROX-M" (quote approx-m) (quote ((om-load-inputfun (quote input-funbox) "pitch list (midicents)" "SELF" 6000) (om-load-inputfun (quote input-funbox) "tone division" "APPROX" 2))) (om-make-point 69 133) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 135 371) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) "pitchclass" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "pitch" 0 (om-make-point 5 45) "" "pitch" 6000 nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((3 0 1 0 nil 0) (0 0 1 1 nil 0) (4 0 3 0 nil 0) (2 0 3 1 nil 0) (6 0 4 0 nil 0) (1 0 5 0 nil 0))) 7.01 nil "" (om-make-point 1126 349) (om-make-point 400 480)) (quote ((om-load-inputfun (quote input-funbox) "" "pitch" nil))) (om-make-point 165 202) nil (list nil) "l" "single-pitch-class"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "pitches" 0 (om-make-point 5 45) "" "pitches" 6000 nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 30 587) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) "pitchclasses" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((7 0 0 0 ((om-make-point 25 101) (om-make-point 468 82) (om-make-point 442 159) (om-make-point 442 216)) 0) (6 0 1 0 nil 0) (7 0 1 1 ((om-make-point 25 101) (om-make-point 288 98) (om-make-point 288 197) (om-make-point 288 294)) 0) (7 0 2 0 nil 0) (2 0 3 0 nil 0) (1 0 3 1 nil 0) (0 0 3 2 ((om-make-point 440 280) (om-make-point 440 360) (om-make-point 444 439) (om-make-point 107 439)) 0) (3 0 8 0 nil 0))) nil 7.01))
