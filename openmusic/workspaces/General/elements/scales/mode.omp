; OM File Header - Saved 2023/01/31 02:12:49
; (7.01 :patc (om-make-point 550 10) (om-make-point 717 503) (om-make-point 870 508) "" 183 0 "2023/01/17 16:01:39" "2023/01/17 19:08:33")
; End File Header
; External resources 
; (list (list (quote :abstraction) "#P\"C:../misc/add-to-last-n.omp\"" "#P\"C:sanitize-scale.omp\""))
(in-package :om)(load-lib-for (quote nil))(setf *om-current-persistent* (om-load-patch1 "mode" (quote ((let ((box (om-load-boxcall (quote lispfun) "POSITION" (quote position) (quote ((om-load-inputfun (quote input-funbox) "ITEM" "ITEM" nil) (om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 40 432) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 138 26) (quote "TODO: better defaults") "" (om-make-point 650 74) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote patch-box) "add-to-last-n 2" (quote ("elements" "misc" "add-to-last-n")) (quote ((om-load-inputfun (quote input-funbox) "" "list" nil) (om-load-inputfun (quote input-funbox) "" "n" nil) (om-load-inputfun (quote input-funbox) "" "add" nil))) (om-make-point 376 413) nil nil nil "add-to-last-n" 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 240 26) (quote "TODO: deal with more than 1 8va scales") "" (om-make-point 257 256) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "octave" 2 (om-make-point 512 332) "" "octave" 1200 nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 186 589) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) "mode" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "ROTATE" (quote rotate) (quote ((om-load-inputfun (quote input-funbox) "the list" "LIST" nil) (om-load-inputfun (quote input-funbox) "nth" "NTH" 1))) (om-make-point 106 294) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 126 26) (quote "TODO: throw error?") "" (om-make-point 229 205) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OMIF" (quote omif) (quote ((om-load-inputfun (quote input-funbox) "IF" "TEST" nil) (om-load-inputfun (quote input-funbox) "THEN" "ACTION" nil) (om-load-inputfun (quote input-funbox) "ELSE" "ELSE" nil))) (om-make-point 214 483) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 406 26) (quote "TODO: possibly deal with 8va separation between scale and keycenter") "" (om-make-point 102 154) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote patch-box) "sanitize-scale" (quote ("elements" "scales" "sanitize-scale")) (quote ((om-load-inputfun (quote input-funbox) "" "scale" (list 0 1 2 3 4 5 6 7)))) (om-make-point 15 152) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 432 65) (quote "scale = sequence of #s (eg. midicent values)$           will get sanitize-scale'd first (but end up starting from keycenter)$keycenter = # that will function as center in new scale$octave = how many #s to add to increase an 8va (1200 if using midicents)") "" (om-make-point 168 67) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "keycenter" 1 (om-make-point 0 264) "" "keycenter" 6000 nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "scale" 0 (om-make-point 5 45) "" "scale" (list 6000 6200 6400 6500 6700 6900 7100) nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((12 0 0 0 nil 0) (10 0 0 1 nil 0) (6 0 2 0 nil 0) (0 0 2 1 nil 0) (4 0 2 2 nil 0) (8 0 5 0 nil 0) (13 0 6 0 ((om-make-point 19 101) (om-make-point 19 196) (om-make-point 205 197) (om-make-point 119 294)) 0) (0 0 6 1 nil 0) (0 0 8 0 nil 0) (2 0 8 1 nil 0) (13 0 8 2 ((om-make-point 19 101) (om-make-point 19 243) (om-make-point 619 246) (om-make-point 238 483)) 0) (13 0 10 0 nil 0))) nil 7.01))
