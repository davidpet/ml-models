; OM File Header - Saved 2023/01/17 19:26:15
; (7.01 :patc (om-make-point 442 10) (om-make-point 50 50) (om-make-point 500 340) "" 183 0 "2023/01/17 15:57:26" "2023/01/17 16:01:12")
; End File Header
(in-package :om)(load-lib-for (quote nil))(setf *om-current-persistent* (om-load-patch1 "sanitize-scale" (quote ((let ((box (om-load-boxcomment "comment" (om-make-point 274 26) (quote "TODO: consider octave dupes since it's a scale") nil (om-make-point 136 337) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 317 26) (quote "scale = that sequence in ascending order w/ no dupes") nil (om-make-point 124 295) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 267 26) (quote "scale = sequence of #s (eg. midicent values)") nil (om-make-point 120 60) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 0 293) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) "scale" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "REMOVE-DUPLICATES" (quote remove-duplicates) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 45 221) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 47 121) (om-make-point 28 28) (quote <) "<" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "SORT" (quote sort) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil) (om-load-inputfun (quote input-funbox) "PREDICATE" "PREDICATE" nil))) (om-make-point 33 151) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "scale" 0 (om-make-point 6 45) "" "scale" (list 0 1 2 3 4 5 6 7) nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((4 0 3 0 nil 0) (6 0 4 0 nil 0) (7 0 6 0 nil 0) (5 0 6 1 nil 0))) nil 7.01))
