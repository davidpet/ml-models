; OM File Header - Saved 2023/01/24 13:29:50
; (7.01 :patc (om-make-point 442 10) (om-make-point 811 327) (om-make-point 1012 596) "" 183 0 "2023/01/16 20:29:42" "2023/01/17 21:44:13")
; End File Header
; External resources 
; (list (list (quote :abstraction) "#P\"C:mode.omp\"" "#P\"C:sanitize-scale.omp\"" "#P\"C:snap-to-scale.omp\""))
(in-package :om)(load-lib-for (quote nil))(setf *om-current-persistent* (om-load-patch1 "scale-degrees" (quote ((let ((box (om-load-boxcall (quote bastype) "aux 5" (quote t) (quote nil) (om-make-point 203 528) (om-make-point 26 28) 1 "1" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM+" (quote om+) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 193 558) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "POSITION" (quote position) (quote ((om-load-inputfun (quote input-funbox) "ITEM" "ITEM" nil) (om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 182 433) nil nil "l" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "FLOOR" (quote floor) (quote ((om-load-inputfun (quote input-funbox) "M" "M" nil))) (om-make-point 289 761) nil nil "l" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "MAPCAR 4" (quote mapcar) (quote ((om-load-inputfun (quote input-funbox) "FUNCTION" "FUNCTION" nil) (om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 392 790) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 4" (quote t) (quote nil) (om-make-point 408 677) (om-make-point 44 28) 1200 "1200" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM/" (quote om/) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 1) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 1))) (om-make-point 376 716) (om-make-point 26 36) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM-" (quote om-) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 338 663) (om-make-point 46 35) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "MAPCAR 3" (quote mapcar) (quote ((om-load-inputfun (quote input-funbox) "FUNCTION" "FUNCTION" nil) (om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 153 504) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 314 300) (om-make-point 44 28) 1200 "1200" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "MOD 2" (quote mod) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil) (om-load-inputfun (quote input-funbox) "Y" "Y" nil))) (om-make-point 298 330) nil nil "l" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "MAPCAR 2" (quote mapcar) (quote ((om-load-inputfun (quote input-funbox) "FUNCTION" "FUNCTION" nil) (om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 346 377) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 21 300) (om-make-point 44 28) 1200 "1200" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "MAPCAR" (quote mapcar) (quote ((om-load-inputfun (quote input-funbox) "FUNCTION" "FUNCTION" nil) (om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 39 411) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "MOD" (quote mod) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil) (om-load-inputfun (quote input-funbox) "Y" "Y" nil))) (om-make-point 5 330) nil nil "l" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 188 26) (quote "TODO: consider scales > 1 8va") "" (om-make-point 560 171) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 402 26) (quote "This version of the scale has scale degrees as indices within octave 0.") "" (om-make-point 451 290) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 453 241) (om-make-point 44 28) 1200 "1200" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote patch-box) "mode" (quote ("elements" "scales" "mode")) (quote ((om-load-inputfun (quote input-funbox) "" "scale" (list 0 1 2 3 4 5 6 7)) (om-load-inputfun (quote input-funbox) "" "keycenter" 3) (om-load-inputfun (quote input-funbox) "" "octave" 8))) (om-make-point 386 273) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote patch-box) "sanitize-scale" (quote ("elements" "scales" "sanitize-scale")) (quote ((om-load-inputfun (quote input-funbox) "" "scale" (list 0 1 2 3 4 5 6 7)))) (om-make-point 323 196) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output 3" 2 (om-make-point 132 338) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) "accidentals" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output 2" 1 (om-make-point 508 763) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) "octaves" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 132 581) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) "degrees" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote patch-box) "snap-to-scale" (quote ("elements" "scales" "snap-to-scale")) (quote ((om-load-inputfun (quote input-funbox) "" "pitch" 6000) (om-load-inputfun (quote input-funbox) "" "scale" (list 6000 6200 6400 6500 6700 6900 7100 7200)))) (om-make-point 86 232) nil nil nil nil 2))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 369 52) (quote "degrees = scale degrees list$octaves = octaves relative to key passed in (0 for same octave)$accidentals = midicent deltas of midi notes from scale") "" (om-make-point 600 726) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 173 52) (quote "melody = list of midicernts$key = midicent root note$scale = midicent scale notes") "" (om-make-point 208 68) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "scale" 2 (om-make-point 98 55) "" "scale" (list 6000 6200 6400 6500 6700 6900 7100) nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "key" 1 (om-make-point 403 183) "" "key" 6000 nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "melody" 0 (om-make-point 32 131) "" "melody" (list 6000 6200 6300 5900 6000) nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((8 0 1 0 nil 0) (0 0 1 1 nil 0) (11 0 2 1 nil 0) (3 0 4 0 nil 0) (6 0 4 1 nil 0) (7 0 6 0 nil 0) (5 0 6 1 nil 0) (23 0 7 0 ((om-make-point 109 296) (om-make-point 109 480) (om-make-point 109 676) (om-make-point 353 663)) 0) (27 0 7 1 ((om-make-point 414 239) (om-make-point 543 531) (om-make-point 352 451) (om-make-point 368 663)) 0) (2 0 8 0 nil 0) (13 0 8 1 nil 0) (9 0 10 1 nil 0) (10 0 11 0 nil 0) (18 0 11 1 nil 0) (14 0 13 0 nil 0) (23 0 13 1 nil 0) (12 0 14 1 nil 0) (19 0 18 0 nil 0) (27 0 18 1 nil 0) (17 0 18 2 nil 0) (26 0 19 0 nil 0) (23 1 20 0 nil 0) (4 0 21 0 nil 0) (1 0 22 0 nil 0) (28 0 23 0 nil 0) (26 0 23 1 nil 0))) nil 7.01))
