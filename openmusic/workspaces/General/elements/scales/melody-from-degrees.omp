; OM File Header - Saved 2023/02/08 21:17:27
; (7.01 :patc (om-make-point 442 10) (om-make-point 101 76) (om-make-point 731 424) "" 183 0 "2023/01/17 19:45:04" "2023/01/24 12:56:42")
; End File Header
; External resources 
; (list (list (quote :abstraction) "#P\"C:mode.omp\""))
(in-package :om)(load-lib-for (quote nil))(setf *om-current-persistent* (om-load-patch1 "melody-from-degrees" (quote ((let ((box (om-load-boxcomment "comment" (om-make-point 354 39) (quote "TODO: defaults$TODO: allow ommiting octaves and accidentals to mean all 0") "" (om-make-point 353 26) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 305 478) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) "melody" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM+ 2" (quote om+) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 306 412) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM+" (quote om+) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 214 358) (om-make-point 20 35) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 333 159) (om-make-point 44 28) 1200 "1200" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM*" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 323 189) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "NTH" (quote nth) (quote ((om-load-inputfun (quote input-funbox) "ORIG-N" "ORIG-N" nil) (om-load-inputfun (quote input-funbox) "ORIG-LIST" "ORIG-LIST" nil))) (om-make-point 91 253) nil nil "l" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "MAPCAR" (quote mapcar) (quote ((om-load-inputfun (quote input-funbox) "FUNCTION" "FUNCTION" nil) (om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 119 288) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 196 96) (om-make-point 26 28) 1 "1" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM-" (quote om-) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 154 159) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote patch-box) "mode" (quote ("elements" "scales" "mode")) (quote ((om-load-inputfun (quote input-funbox) "" "scale" (list 6000 6200 6400 6500 6700 6900 7100)) (om-load-inputfun (quote input-funbox) "" "keycenter" 6000) (om-load-inputfun (quote input-funbox) "" "octave" 1200))) (om-make-point 93 156) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "accidentals" 4 (om-make-point 462 156) "" "accidentals" (list 0 0 0 0 0 0) nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "octaves" 3 (om-make-point 327 62) "" "octaves" (list 0 0 0 0 -1 0) nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 266 78) (quote "inverse of scale-degrees patch$but also can be used for modal transposition $by changing key center in same scale$or chromatic transposition by changing scale$") "" (om-make-point 439 85) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "degrees" 2 (om-make-point 147 47) "" "degrees" (list 1 2 3 2 7 1) (om-make-point 33 58)))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "scale" 1 (om-make-point 65 44) "" "scale" (list 6000 6200 6400 6500 6700 6900 7100) nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "key" 0 (om-make-point 5 45) "" "key" 6000 nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((2 0 1 0 nil 0) (3 0 2 0 nil 0) (11 0 2 1 nil 0) (7 0 3 0 nil 0) (5 0 3 1 nil 0) (12 0 5 0 nil 0) (4 0 5 1 nil 0) (10 0 6 1 nil 0) (6 0 7 0 nil 0) (9 0 7 1 nil 0) (14 0 9 0 nil 0) (8 0 9 1 nil 0) (15 0 10 0 nil 0) (16 0 10 1 nil 0))) nil 7.01))
