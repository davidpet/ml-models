; OM File Header - Saved 2023/02/03 15:50:59
; (7.01 :patc (om-make-point 1036 10) (om-make-point 671 199) (om-make-point 871 391) "" 183 0 "2023/01/31 01:16:18" "2023/01/31 02:14:17")
; End File Header
; External resources 
; (list (list (quote :abstraction) "#P\"../scales/melody-from-degrees.omp\"" "#P\"../misc/safe-nth.omp\""))
(in-package :om)(load-lib-for (quote nil))(setf *om-current-persistent* (om-load-patch1 "chords-from-degrees" (quote ((let ((box (om-load-boxcomment "comment" (om-make-point 315 26) (quote "TODO: make it also take a 1-level list for convenience") nil (om-make-point 360 202) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CHORD-SEQ" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 1000)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 431 266) (om-make-point 338 129) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6000 6400 6700) (6700 7200 7600) (7600 7900 8400) (7200 8400))) :lonset (quote (0 1000 2000 3000 4000)) :ldur (quote ((1000 1000 1000) (1000 1000 1000) (1000 1000 1000) (1000 1000))) :lvel (quote ((100 100 100) (100 100 100) (100 100 100) (100 100))) :loffset (quote ((0 0 0) (0 0 0) (0 0 0) (0 0))) :lchan (quote ((1 1 1) (1 1 1) (1 1 1) (1 1))) :legato 0)))) (load-port-info newobj (quote ((0 0 0) (0 0 0) (0 0 0) (0 0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list nil (quote t) (quote :normal) 1 0 (om-make-point 400 20) (om-make-point 370 280) 0 1000 nil 1 (quote :midi-player) nil nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 118 26) (quote "TODO: accidentals") nil (om-make-point 346 174) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "make-chord" (om-load-patch-abs1 "make-chord" (quote ((let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 231 266) (om-make-point 26 28) 0 "0" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LENGTH" (quote length) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 288 235) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "REPEAT-N" (quote repeat-n) (quote ((om-load-inputfun (quote input-funbox) "something" "SELF" nil) (om-load-inputfun (quote input-funbox) "times" "N" 0))) (om-make-point 228 296) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "FIRST" (quote first) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 12 142) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote patch-box) "melody-from-degrees" (quote ("elements" "scales" "melody-from-degrees")) (quote ((om-load-inputfun (quote input-funbox) "" "key" 6000) (om-load-inputfun (quote input-funbox) "" "scale" (list 6000 6200 6400 6500 6700 6900 7100)) (om-load-inputfun (quote input-funbox) "" "degrees" (list 1 2 3 2 7 1)) (om-load-inputfun (quote input-funbox) "" "octaves" (list 0 0 0 0 -1 0)) (om-load-inputfun (quote input-funbox) "" "accidentals" (list 0 0 0 0 0 0)))) (om-make-point 26 257) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "make-octaves" (om-load-patch-abs1 "make-octaves" (quote ((let ((box (om-load-boxcall (quote abstraction) "append-octave" (om-load-patch-abs1 "append-octave" (quote ((let ((box (om-load-boxcall (quote patch-box) "safe-nth 2" (quote ("elements" "misc" "safe-nth")) (quote ((om-load-inputfun (quote input-funbox) "" "n" nil) (om-load-inputfun (quote input-funbox) "" "list" nil))) (om-make-point 3 252) nil nil nil "safe-nth" 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "1- 3" (quote 1-) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil))) (om-make-point 57 373) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OMOR" (quote omor) (quote ((om-load-inputfun (quote input-funbox) "something" "SELF" nil) (om-load-inputfun (quote input-funbox) "other things" "REST" nil))) (om-make-point 15 401) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "APPEND" (quote append) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 137 546) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LIST" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 143 479) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "1+" (quote 1+) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil))) (om-make-point 243 255) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "FIRST" (quote first) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 199 185) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LAST" (quote last) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 189 123) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "<" (quote <) (quote ((om-load-inputfun (quote input-funbox) "NUM" "NUM" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 59 438) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OMIF" (quote omif) (quote ((om-load-inputfun (quote input-funbox) "IF" "TEST" nil) (om-load-inputfun (quote input-funbox) "THEN" "ACTION" nil) (om-load-inputfun (quote input-funbox) "ELSE" "ELSE" nil))) (om-make-point 134 396) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "1- 2" (quote 1-) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil))) (om-make-point 113 227) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LENGTH" (quote length) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 60 122) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "1-" (quote 1-) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil))) (om-make-point 74 176) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 150 608) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) "newoctaves" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "next" 2 (om-make-point 105 45) "" "next" 1 nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "octaves" 1 (om-make-point 55 45) "" "octaves" (list 0 0 0) nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "degrees" 0 (om-make-point 5 45) "" "degrees" (list 1 3 1) nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((10 0 0 0 nil 0) (16 0 0 1 nil 0) (14 0 1 0 nil 0) (0 0 2 0 nil 0) (1 0 2 1 nil 0) (15 0 3 0 nil 0) (4 0 3 1 nil 0) (9 0 4 0 nil 0) (6 0 5 0 nil 0) (7 0 6 0 nil 0) (15 0 7 0 nil 0) (2 0 8 0 nil 0) (14 0 8 1 ((om-make-point 118 101) (om-make-point 118 215) (om-make-point 166 219) (om-make-point 77 438)) 0) (8 0 9 0 nil 0) (6 0 9 1 nil 0) (5 0 9 2 nil 0) (12 0 10 0 nil 0) (15 0 11 0 nil 0) (11 0 12 0 nil 0) (3 0 13 0 nil 0))) 7.01 nil "" (om-make-point 866 381) (om-make-point 495 706)) (quote ((om-load-inputfun (quote input-funbox) "" "degrees" nil) (om-load-inputfun (quote input-funbox) "" "octaves" nil) (om-load-inputfun (quote input-funbox) "" "next" nil))) (om-make-point 16 187) nil nil "l" "append-octave"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "CDR" (quote cdr) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil))) (om-make-point 168 321) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LIST" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 168 135) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "REDUCE" (quote reduce) (quote ((om-load-inputfun (quote input-funbox) "FUNCTION" "FUNCTION" nil) (om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil) (om-load-inputkeyword (quote input-keyword) "" "initial-value" (quote :initial-value) nil nil))) (om-make-point 99 253) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 114 374) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) "octaves" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "octave" 1 (om-make-point 155 43) "" "octave" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "degrees" 0 (om-make-point 105 43) "" "degrees" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((6 0 0 0 nil 0) (3 0 1 0 nil 0) (5 0 2 0 nil 0) (0 0 3 0 nil 0) (6 0 3 1 nil 0) (2 0 3 2 nil 0) (1 0 4 0 nil 0))) 7.01 nil "" (om-make-point 1007 239) (om-make-point 400 480)) (quote ((om-load-inputfun (quote input-funbox) "" "degrees" nil) (om-load-inputfun (quote input-funbox) "" "octave" nil))) (om-make-point 168 143) nil (list (list 0 0 0 1)) nil "make-octaves"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 54 368) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) "chord" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "octave" 2 (om-make-point 206 38) "" "octave" 0 nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "degrees" 1 (om-make-point 156 38) "" "degrees" (list 1 3 5 1) nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "scale" 0 (om-make-point 5 45) "" "scale" (list 6000 6200 6400 6500 6700 6900 7100) nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((5 0 1 0 nil 0) (0 0 2 0 nil 0) (1 0 2 1 nil 0) (9 0 3 0 nil 0) (3 0 4 0 nil 0) (9 0 4 1 nil 0) (8 0 4 2 nil 0) (5 0 4 3 nil 0) (2 0 4 4 nil 0) (8 0 5 0 nil 0) (7 0 5 1 nil 0) (4 0 6 0 nil 0))) 7.01 nil "" (om-make-point 1271 261) (om-make-point 400 460)) (quote ((om-load-inputfun (quote input-funbox) "" "scale" nil) (om-load-inputfun (quote input-funbox) "" "degrees" nil) (om-load-inputfun (quote input-funbox) "" "octave" nil))) (om-make-point 33 217) nil (list nil) "l" "make-chord"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 228 26) (quote "chords = ready to pass into chord-seq") nil (om-make-point 182 365) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 94 348) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) "chords" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "MAPCAR" (quote mapcar) (quote ((om-load-inputfun (quote input-funbox) "FUNCTION" "FUNCTION" nil) (om-load-inputfun (quote input-funbox) "LIST" "LIST" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 85 286) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 485 26) (quote "octaves = list of octave numbers for chord bass notes (0 = same as passed in scale)") nil (om-make-point 157 90) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "octaves" 2 (om-make-point 105 45) "" "octaves" (list 0 0 1 1) nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 553 26) (quote "degrees = list of lists (inner atoms are degrees stacked from bottom to top (1st item is bottom))") nil (om-make-point 159 68) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 296 26) (quote "scale = scale to derive from (1st note = degree 1)") nil (om-make-point 157 49) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "degrees" 1 (om-make-point 55 45) "" "degrees" (list (list 1 3 5) (list 5 1 3) (list 3 5 1) (list 1 1)) nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "scale" 0 (om-make-point 5 45) "" "scale" (list 6000 6200 6400 6500 6700 6900 7100) nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((6 0 1 1 nil 0) (12 0 3 0 nil 0) (6 0 5 0 nil 0) (3 0 6 0 nil 0) (11 0 6 1 nil 0) (8 0 6 2 nil 0))) nil 7.01))
