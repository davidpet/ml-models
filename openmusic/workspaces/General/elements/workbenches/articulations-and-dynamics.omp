; OM File Header - Saved 2023/02/08 21:17:25
; (7.01 :patc (om-make-point 1036 10) (om-make-point 667 121) (om-make-point 1160 881) "" 183 0 "2023/02/07 23:11:16" "2023/02/08 17:06:45")
; End File Header
; External resources 
; (list (list (quote :abstraction) "#P\"../scales/major-scale.omp\""))
(in-package :om)(load-lib-for (quote nil))(setf *om-current-persistent* (om-load-patch1 "articulations-and-dynamics" (quote ((let ((box (om-load-boxcomment "comment" (om-make-point 309 26) (quote "I can't tell if this works because GS Wavetable Synth") nil (om-make-point 775 755) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 101 26) (quote "sfz on playback") nil (om-make-point 924 702) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 6" (quote t) (quote nil) (om-make-point 847 657) (om-make-point 102 28) (list 127 20 70 128) "(127 20 70 128)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 5" (quote t) (quote nil) (om-make-point 735 565) (om-make-point 138 28) (list 4000 5000 6000 7000) "(4000 5000 6000 7000)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 4" (quote t) (quote nil) (om-make-point 601 649) (om-make-point 132 28) "ExpressionController" "\"ExpressionController\"" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "PLAY 2" (quote play) (quote ((om-load-inputfun (quote input-funbox) "object" "SELF" nil))) (om-make-point 508 732) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "MIDICONTROL" (quote midicontrol) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfunmenu1 (quote input-funmenu) "type of event (string)" "ctrltype" "ChannelVolume" (list (list "-- Tempo (bpm)" "Tempo") (list "-- KeyPress" "KeyPress") (list "-- ChanPress" "ChanPress") (list "-- PitchBend (0 to 127)" "PitchBend") (list "-- PitchWheel (0 to 16383)" "PitchWheel") (list "00 Bank Select" "BankSelect") (list "01 Modulation Wheel" "ModulationWheel") (list "02 Breath Controller" "BreathController") (list "04 Foot Controller" "FootController") (list "05 Portamento Time" "PortamentoTime") (list "06 Data Entry MSB" "DataEntryMSB") (list "07 Channel Volume" "ChannelVolume") (list "08 Balance" "Balance") (list "10 Pan" "Pan") (list "11 Expression Controller" "ExpressionController") (list "12 Effect Control 1" "EffectControl1") (list "13 Effect Control 2" "EffectControl2") (list "16 General Purpose Controller 1" "GeneralPurposeController1") (list "17 General Purpose Controller 2" "GeneralPurposeController2") (list "18 General Purpose Controller 3" "GeneralPurposeController3") (list "19 General Purpose Controller 4" "GeneralPurposeController4") (list "00/32 Bank Select Fine" "BankSelectFine") (list "01/33 Modulation Wheel Fine" "ModulationWheelFine") (list "02/34 Breath Controller Fine" "BreathControllerFine") (list "04/36 Foot Controller Fine" "FootControllerFine") (list "05/37 Portamento Time Fine" "PortamentoTimeFine") (list "06/38 Data Entry MSB-LSB Fine" "DataEntryMSBLSB") (list "07/39 Channel Volume Fine" "ChannelVolumeFine") (list "08/40 Balance Fine" "BalanceFine") (list "10/42 Pan Fine" "PanFine") (list "11/43 Expression Controller Fine" "ExpressionControllerFine") (list "12/44 Effect Control 1 Fine" "EffectControl1Fine") (list "13/45 Effect Control 2 Fine" "EffectControl2Fine") (list "16/48 General Purpose Controller 1 Fine" "GeneralPurposeController1Fine") (list "17/49 General Purpose Controller 2 Fine" "GeneralPurposeController2Fine") (list "18/50 General Purpose Controller 3 Fine" "GeneralPurposeController3Fine") (list "19/51 General Purpose Controller 4 Fine" "GeneralPurposeController4Fine") (list "64 Damper Pedal on/off (Sustain)" "DamperPedal") (list "65 Portamento On/Off" "Portamento") (list "66 Sustenuto On/Off" "Sustenuto") (list "67 Soft Pedal On/Off" "SoftPedal") (list "68 Legato Footswitch" "LegatoFootswitch") (list "69 Hold 2 (on/off)" "Hold2") (list "70 Sound Controller 1" "SoundController1") (list "71 Sound Controller 2" "SoundController2") (list "72 Sound Controller 3" "SoundController3") (list "73 Sound Controller 4" "SoundController4") (list "74 Sound Controller 5" "SoundController5") (list "75 Sound Controller 6" "SoundController6") (list "76 Sound Controller 7" "SoundController7") (list "77 Sound Controller 8" "SoundController8") (list "78 Sound Controller 9" "SoundController9") (list "79 Sound Controller 10" "SoundController10") (list "84 Portamento Control" "PortamentoControl") (list "91 Effects 1 Depth" "Effects1Depth") (list "92 Effects 2 Depth" "Effects2Depth") (list "93 Effects 3 Depth" "Effects3Depth") (list "94 Effects 4 Depth" "Effects4Depth") (list "95 Effects 5 Depth" "Effects5Depth") (list "96 Data Increment" "DataIncrement") (list "-- Private" "Private"))) (om-load-inputfun (quote input-funbox) "event dates (ms)" "Ldates" nil) (om-load-inputfun (quote input-funbox) "track number" "ref" 0) (om-load-inputfun (quote input-funbox) "output port number" "port" 0) (om-load-inputfun (quote input-funbox) "MIDI channel (1-16)" "chan" 1) (om-load-inputfun (quote input-funbox) "value list" "Lvalues" nil))) (om-make-point 655 687) (om-make-point 227 74) (let ((newobj (when (find-class (quote midicontrol) nil) (let ((newctrl (simple-bpf-from-list (quote (4000 5000 6000 7000)) (quote (127 20 70 128)) (quote midicontrol) 0))) (setf (bpfcolor newctrl) (om-make-color 0 0 0)) (setf (ctrltype newctrl) (quote "ExpressionController") (ref newctrl) (quote 0) (port newctrl) (quote 0) (chan newctrl) (quote 1) (ev-type newctrl) (quote :ctrlchange) (ctr-num newctrl) 11) newctrl)))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "MIDICONTROL") (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list nil (quote t) (quote :normal) 1 0 (om-make-point -8 -8) (om-make-point 2194 1151) 0 1000 nil 1 (quote :midi-player) nil nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "PLAY" (quote play) (quote ((om-load-inputfun (quote input-funbox) "object" "SELF" nil))) (om-make-point 245 701) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 137 26) (quote "attack-only crescendo") nil (om-make-point 835 40) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 781 0) (om-make-point 32 28) 13 "13" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 710 0) (om-make-point 38 28) 116 "116" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 660 1) (om-make-point 32 28) 20 "20" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "ARITHM-SER" (quote arithm-ser) (quote ((om-load-inputfun (quote input-funbox) "begin" "BEGIN" 0) (om-load-inputfun (quote input-funbox) "end " "END" 10) (om-load-inputfun (quote input-funbox) "step" "STEP" 1))) (om-make-point 696 27) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CHORD-SEQ" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 1000)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 548 111) (om-make-point 472 109) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6000) (6200) (6400) (6500) (6700) (6900) (7100) (7200))) :lonset (quote (0 1000 2000 3000 4000 5000 6000 7000 8000)) :ldur (quote ((1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000))) :lvel (quote ((20) (33) (46) (59) (72) (85) (98) (111))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list nil (quote t) (quote :normal) 1 0 (om-make-point 400 20) (om-make-point 370 280) 0 1000 nil 1 (quote :midi-player) nil nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "SEQUENCE" (quote sequence) (quote ((om-load-inputfun (quote input-funbox) "something" "PATCH" nil) (om-load-inputfun (quote input-funbox) "more things" "OPPATCH" nil) (om-load-inputfun (quote input-funbox) "more things" "OPPATCH" nil))) (om-make-point 164 623) nil nil nil 3))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "BUTTON" (quote button) (quote ((om-load-inputfun (quote input-funbox) "button text" "text" "Play") (om-load-inputfun (quote input-funbox) "a function or box in lambda mode" "action" (quote t)))) (om-make-point 115 766) (om-make-point 130 44) (let ((rep (om-make-dialog-item (quote button) (om-make-point 1 1) (om-make-point 110 24) "Play"))) rep) nil nil (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40))) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 282 26) (quote "TODO: use extas to add notation staccatos here") nil (om-make-point 474 247) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 109 26) (quote "playback version") nil (om-make-point 531 546) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "VOICE 2" (quote voice) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "a list representing a rhythm tree" "tree" (list (quote ?) (list (list (list 4 4) (list 1 1 1 1))))) (om-load-inputfun (quote input-funbox) "a chord object, a list of chords, a list of midics, a list of lists of midics..." "chords" (list (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord))) (om-load-inputfun (quote input-funbox) "frequency of the quarter-note (default 60/mn)" "tempo" 60) (om-load-inputfun (quote input-funbox) "overlapping percentage between every successive chords, calculated from the second chord's duration" "legato" 100) (om-load-inputfun (quote input-funbox) "sub lists (one sub list per chord) indicating notes to be tied to notes of the same value, in a next chord" "ties" nil))) (om-make-point 215 513) (om-make-point 271 84) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (2 (((4 4) (1 (1 (1 -1 1 -1)) (1 (1 -1 1 -1)) (1 (1 -1 1 -1)))) ((4 4) (4))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (20)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (250)) :lvel (quote (33)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (250)) :lvel (quote (46)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (250)) :lvel (quote (59)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (250)) :lvel (quote (72)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900)) :ldur (quote (250)) :lvel (quote (85)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7100)) :ldur (quote (250)) :lvel (quote (98)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7200)) :ldur (quote (4000)) :lvel (quote (111)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 60) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list nil (quote t) (quote :normal) 1 0 (om-make-point 400 20) (om-make-point 370 280) 0 1000 nil 1 (quote :midi-player) nil nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "apply-8th-note-staccato" (om-load-patch-abs1 "apply-8th-note-staccato" (quote ((let ((box (om-load-boxcall (quote lispfun) "APPEND" (quote append) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 37 296) nil nil "l" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "REDUCE" (quote reduce) (quote ((om-load-inputfun (quote input-funbox) "FUNCTION" "FUNCTION" nil) (om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 69 346) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 120 403) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) "newrhythms" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "process-note" (om-load-patch-abs1 "process-note" (quote ((let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 122 236) (om-make-point 84 28) (list 1/16 -1/16) "(1/16 -1/16)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 121 173) (om-make-point 37 28) 1/8 "1/8" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "EQL" (quote eql) (quote ((om-load-inputfun (quote input-funbox) "A" "A" nil) (om-load-inputfun (quote input-funbox) "B" "B" nil))) (om-make-point 107 203) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LIST" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 210 212) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OMIF" (quote omif) (quote ((om-load-inputfun (quote input-funbox) "IF" "TEST" nil) (om-load-inputfun (quote input-funbox) "THEN" "ACTION" nil) (om-load-inputfun (quote input-funbox) "ELSE" "ELSE" nil))) (om-make-point 143 295) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 162 366) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) "sublist" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "rhythm" 0 (om-make-point 170 36) "" "rhythm" 1/4 nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((6 0 2 0 nil 0) (1 0 2 1 nil 0) (6 0 3 0 nil 0) (2 0 4 0 nil 0) (0 0 4 1 nil 0) (3 0 4 2 nil 0) (4 0 5 0 nil 0))) 7.01 nil "" (om-make-point 666 258) (om-make-point 400 481)) (quote ((om-load-inputfun (quote input-funbox) "" "rhythm" nil))) (om-make-point 55 188) nil (list nil) "l" "process-note"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "MAPCAR" (quote mapcar) (quote ((om-load-inputfun (quote input-funbox) "FUNCTION" "FUNCTION" nil) (om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 126 281) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "rhythms" 0 (om-make-point 157 103) "" "rhythms" (list 1/8 1/8 1/4 1 1/8) nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((0 0 1 0 nil 0) (4 0 1 1 nil 0) (1 0 2 0 nil 0) (3 0 4 0 nil 0) (5 0 4 1 nil 0))) 7.01 nil "" (om-make-point 811 195) (om-make-point 400 481)) (quote ((om-load-inputfun (quote input-funbox) "" "rhythms" nil))) (om-make-point 63 368) nil (list (list 1/4 1/16 -1/16 1/16 -1/16 1/16 -1/16 1/16 -1/16 1/16 -1/16 1/16 -1/16 1)) nil "apply-8th-note-staccato"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 105 26) (quote "notation version") nil (om-make-point 373 242) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "VOICE" (quote voice) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "a list representing a rhythm tree" "tree" (list (quote ?) (list (list (list 4 4) (list 1 1 1 1))))) (om-load-inputfun (quote input-funbox) "a chord object, a list of chords, a list of midics, a list of lists of midics..." "chords" (list (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord))) (om-load-inputfun (quote input-funbox) "frequency of the quarter-note (default 60/mn)" "tempo" 60) (om-load-inputfun (quote input-funbox) "overlapping percentage between every successive chords, calculated from the second chord's duration" "legato" 100) (om-load-inputfun (quote input-funbox) "sub lists (one sub list per chord) indicating notes to be tied to notes of the same value, in a next chord" "ties" nil))) (om-make-point 160 211) (om-make-point 224 88) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (2 (((4 4) (1 (1 (1 1)) (1 (1 1)) (1 (1 1)))) ((4 4) (4))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (20)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (500)) :lvel (quote (33)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (500)) :lvel (quote (46)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (500)) :lvel (quote (59)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (500)) :lvel (quote (72)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900)) :ldur (quote (500)) :lvel (quote (85)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7100)) :ldur (quote (500)) :lvel (quote (98)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7200)) :ldur (quote (4000)) :lvel (quote (111)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 60) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list nil (quote t) (quote :normal) 1 0 (om-make-point 400 20) (om-make-point 370 280) 0 1000 nil 1 (quote :midi-player) nil nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 54 78) (om-make-point 181 28) (list 1/4 1/8 1/8 1/8 1/8 1/8 1/8 1) "(1/4 1/8 1/8 1/8 1/8 1/8 1/8 1)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote patch-box) "major-scale" (quote ("elements" "scales" "major-scale")) (quote ((om-load-inputfun (quote input-funbox) "the start note" "startnote" 6000))) (om-make-point 350 53) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((6 0 5 0 nil 0) (4 0 6 1 nil 0) (3 0 6 2 nil 0) (2 0 6 6 nil 0) (14 1 7 0 nil 0) (11 0 12 0 nil 0) (10 0 12 1 nil 0) (9 0 12 2 nil 0) (23 0 13 1 nil 0) (12 0 13 4 nil 0) (21 0 14 0 nil 0) (18 0 14 1 nil 0) (5 0 14 2 nil 0) (7 0 15 1 nil 0) (19 0 18 1 nil 0) (13 0 18 2 nil 0) (22 0 19 0 nil 0) (22 0 21 1 nil 0) (13 0 21 2 nil 0))) nil 7.01))
